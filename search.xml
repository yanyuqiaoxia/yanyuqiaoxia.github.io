<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascript笔记</title>
    <url>/2020/04/14/javascript%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Hello JavaScript！</p>
<h2 id="1-01-什么是-JavaScript？"><a href="#1-01-什么是-JavaScript？" class="headerlink" title="1.01 - 什么是 JavaScript？"></a>1.01 - 什么是 JavaScript？</h2><ul>
<li><p>JavaScript是一个轻量级的<em>脚本语言<em>，同时也是一个</em>弱类型语言</em></p>
</li>
<li><p>脚本语言：不具备开发操作系统的能力，是只用来编写控制其他大型应用程序的“脚本”</p>
</li>
<li><p>弱类型语言：语发中变量对于类型的要求并不特别严格</p>
</li>
<li><p>JavaScript的优点</p>
<ul>
<li>几乎是所有浏览器都内置支持的脚本语言</li>
<li>越来越强大的功能，随着HTML5的出现逐渐可以支持调用系统功能、参与服务器端开发（nodeJS）</li>
<li>轻量级，易学，易用，对运行环境平台几乎没有要求，可以跨多平台</li>
<li>语言灵活多变，针对同一需求，能设计出多重解决思路</li>
</ul>
</li>
<li><p>JavaScript与ECMAScript的关系</p>
<ul>
<li>ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。由于历史原因，JavaScript被提交给国际标准化组织ECMA（European Computer Manufacturers Association）指定为国际标准，由于版权问题无法再使用 JavaScript的名字以及其他的相关原因，所以最终成为了ECMAScript</li>
</ul>
</li>
</ul>
<h2 id="1-02-浏览器中的JavaScript能做什么"><a href="#1-02-浏览器中的JavaScript能做什么" class="headerlink" title="1.02 - 浏览器中的JavaScript能做什么"></a>1.02 - 浏览器中的JavaScript能做什么</h2><ul>
<li>查询，修改标签元素的css样式</li>
<li>获取，响应用户对于浏览器的操作（BOM）</li>
<li>增，删，查，改，浏览器中的标签元素（DOM）</li>
<li>获取表单的信息，操作表单状态</li>
<li>对后台发送接收数据（ajax）</li>
<li>……..</li>
</ul>
<h2 id="1-03-JavaScript写在哪里？"><a href="#1-03-JavaScript写在哪里？" class="headerlink" title="1.03 - JavaScript写在哪里？"></a>1.03 - JavaScript写在哪里？</h2><ul>
<li>script标签中<ul>
<li>body结束标签之前</li>
<li>head标签中（window.onload）</li>
</ul>
</li>
<li>.js 文件，通过script标签引入</li>
</ul>
<h1 id="02-JavaScript的书写相关"><a href="#02-JavaScript的书写相关" class="headerlink" title="02-JavaScript的书写相关"></a>02-JavaScript的书写相关</h1><h2 id="2-01-JavaScript的书写相关"><a href="#2-01-JavaScript的书写相关" class="headerlink" title="2.01 - JavaScript的书写相关"></a>2.01 - JavaScript的书写相关</h2><ul>
<li>JavaScript写在哪里？<ul>
<li>script标签中<ul>
<li>body结束标签之前</li>
<li>head标签中（window.onload）</li>
</ul>
</li>
<li>.js 文件，通过script标签引入</li>
</ul>
</li>
<li>书写注意事项<ol>
<li>严格区分大小写，大写字母与小写字母是完全不同的意义</li>
<li>英文半角下的标点字符</li>
<li>不能把，关键字，保留字（new var for..），作为<strong>标识符</strong>（变量名，函数名）</li>
<li>语句用分号结束</li>
</ol>
</li>
<li><strong>从上至下的执行顺序</strong></li>
</ul>
<h2 id="2-02-变量，基本数据类型，赋值"><a href="#2-02-变量，基本数据类型，赋值" class="headerlink" title="2.02 - 变量，基本数据类型，赋值"></a>2.02 - 变量，基本数据类型，赋值</h2><ul>
<li><p><strong>变量</strong></p>
<ul>
<li><p>变量是JavaScript里的一种容器，每个变量都已一个对应的<strong>变量名</strong>我们可以通过<strong>var</strong>关键字<strong>空格</strong>变量名的方式申明变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 两个反斜杠为js里面的单行注释 多行注释与css里的注释一致&#x2F;* *&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 申明几个变量</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a; &#x2F;&#x2F; 变量 a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var b; &#x2F;&#x2F; 变量 b</span><br></pre></td></tr></table></figure>

<p>也可以这样一个 var 关键字同时申明多个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a,b; &#x2F;&#x2F; 与上边等同并且逗号之后可以换行</span><br></pre></td></tr></table></figure>
</li>
<li><p>命名规范</p>
<ul>
<li><p>见名知意</p>
</li>
<li><p>区分大小写</p>
</li>
<li><p>可以使用 _ $ 或者以其开头，但是不能使用 - * / + = 等有特殊意义的符号</p>
</li>
<li><p>可以使用数字但是不能用数字进行开头</p>
</li>
<li><p>不能使用 关键字，保留字</p>
<blockquote>
<p>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield</p>
</blockquote>
</li>
</ul>
</li>
<li><p>那么问题来了</p>
<ul>
<li>容器里放什么东西？</li>
<li>如何放到容器里？</li>
<li>为什么要把它放在容器里面？</li>
<li>容器里放的东西有什么限制，或者注意事项？</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>基本数据类型</strong></p>
<ul>
<li><p>JavaScript中同样涉及到对于许多数据的操作，其大致可以有6种常见的数据类型</p>
<ul>
<li><p><strong>Nunber 数字</strong></p>
<p>1,2,3,4,5 … NaN</p>
</li>
<li><p><strong>String 字符串</strong></p>
<p>“hello world!!”</p>
</li>
<li><p><strong>Boolean 布尔值</strong></p>
<p>true false</p>
</li>
<li><p><strong>function 函数</strong></p>
</li>
<li><p><strong>object对象</strong></p>
<p>{} , array , element , （null）…</p>
</li>
<li><p><strong>undefined 未定义</strong></p>
</li>
<li><p><strong>（null） 空</strong></p>
</li>
</ul>
</li>
<li><p><strong>typeof</strong> 是用于检测数据的数据类型的操作符，返回一个String</p>
</li>
<li><p><strong>console.log()</strong> 控制台输出，常用于代码调试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof 123);&#x2F;&#x2F; number</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof &quot;123&quot;);&#x2F;&#x2F; String</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof true);&#x2F;&#x2F; Boolean</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof &#123;&#125;);&#x2F;&#x2F; object</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof undefined);&#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof null);&#x2F;&#x2F; object</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>赋值</strong></p>
<ul>
<li><p>赋值是一条语句，它所做的操作是把一个值赋予变量，书写格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10; &#x2F;&#x2F; 把数字 10 赋值给变量 a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof a); &#x2F;&#x2F; number</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a); &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值操作可以和变量声明同步进行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 10; &#x2F;&#x2F; 结果与分开赋值一致</span><br></pre></td></tr></table></figure>
</li>
<li><p>当出现莫名奇妙字符时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a;&#x2F;&#x2F; Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure>

<p>但是同时进行赋值操作时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 基本与 var 申明变量后使用一致，但是禁止这样做</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof a); &#x2F;&#x2F; numberr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a); &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript中的变量中可以保存任意一种数据类型，并且同一变量<strong>可以被赋值多次</strong>，但是一次只能存储一个值，所以变量的值为最近一次被赋予的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a);&#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &quot;hello world!&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a);&#x2F;&#x2F; &quot;hello world!&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10.5;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a);&#x2F;&#x2F; 10.5</span><br></pre></td></tr></table></figure>
</li>
<li><p>申明多个变量时的赋值方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 10,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; &quot;hello JavaScript&quot;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c &#x3D; true;&#x2F;&#x2F; 结尾处用分号结束</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>弹窗，打印</strong>：你爱我吗？</p>
<blockquote>
<p>弹窗与打印都能够直观的输出抽象的数据，是JavaScript中最主要的调试手段，弹窗也可以进行一些简单的互动</p>
</blockquote>
<ul>
<li><p>打印 console</p>
<ul>
<li>控制台直接输出：console.log( 任意数据类型 );</li>
<li>代码执行时间输出：<ul>
<li>起始标记 - console.time(“标识字符串”); </li>
<li>结束标记 - console.timeEnd(“标记字符串”);</li>
</ul>
</li>
</ul>
</li>
<li><p>弹窗 </p>
<ul>
<li><p>提示弹窗：alert( 任意数据类型 );</p>
</li>
<li><p>选择弹窗：confirm( 任意数据类型 );</p>
<p>带 确认 和 否定 按钮，点击后返回一个布尔值</p>
</li>
<li><p>输入弹窗：prompt( 任意数据类型 );</p>
<p>带一个单行输入框，返回输入的内容的字符串</p>
</li>
</ul>
</li>
<li><p>document.write()：向网页中追加内容</p>
<ul>
<li>直接加载时等同于在body之中添加内容</li>
<li>当网页完全加载之后再调用该方法会覆盖原网页中所有的内容</li>
</ul>
<blockquote>
<p>会对网页加载造成一定程度破坏，因为可能会重载所有内容，所以尽量的避免使用</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>其他</strong></p>
<ul>
<li><p>赋值的操作中，以赋值符号为分界线的执行顺序为从右到左，无法调换顺序，但是通常情况下右边依然是从左到右的顺序</p>
</li>
<li><p>重复申明的变量视为只申明了一次</p>
</li>
<li><p>任意位置申明的变量都会被提到该作用域的顶部：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(a);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a;</span><br></pre></td></tr></table></figure>

<p>等同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(a);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="2-03-运算符"><a href="#2-03-运算符" class="headerlink" title="2.03 - 运算符"></a>2.03 - 运算符</h2><ul>
<li><p><strong>算数运算符</strong>：加减乘除 …</p>
<ul>
<li>加，减，乘，除，模 ：+，-，*，/，%</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( 1+1 ); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( 2-1 ); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( 2*2 ); &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( 4&#x2F;2 ); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( 3%2 ); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<ul>
<li>NaN（Not a Number）：瞎运算的时候<ul>
<li>isNaN()：判断一个数据是不是NaN的方法，返回一个布尔值</li>
<li>NaN 与任何数据都不相等包括 NaN 本身</li>
<li>NaN 为number类型</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1 + undefined;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a ); &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( isNaN(a) ); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(NaN &#x3D;&#x3D; NaN); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(typeof NaN); &#x2F;&#x2F; number</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>字符串拼接</strong>：加号（+）的兼职工作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str &#x3D; &quot;hellow&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( str + &quot; &quot; + &quot;world&quot; ); &#x2F;&#x2F; &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&quot;1&quot; + &quot;1&quot;); &#x2F;&#x2F; &quot;11&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>赋值运算符</strong>：赋值和运算的工作我一起包啦！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 普通运算：赋值与运算两步进行 *&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a * 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 赋值运算：赋值与运算同时进行 *&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a *&#x3D; 1; &#x2F;&#x2F; 与普通运算：a &#x3D; a * 1  一致</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a); &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 同时还有</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a +&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a -&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x2F;&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a %&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<ul>
<li>自增，自减：++ 与 – 的故事</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 普通的方式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a + 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a - 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 赋值运算</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a +&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a -&#x3D; 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 究极 1：先返回值，再自增（自减）1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a ++;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a --;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 究极 2：先自增（自减） 1 再返回值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">++ a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 只有自增（减） 1  才有简写方式   </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 不能直接对数字使用      1 ++  这样的写方法是错误的</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><strong>比较运算符</strong></p>
<ul>
<li>用于比较运算符 左边 较 右边的值，返回一个布尔值</li>
<li>普通比较：只比较值，不比较数据类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1 , b &#x3D; &quot;1&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &#x3D;&#x3D; b );&#x2F;&#x2F; true 相等</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &lt; b ); &#x2F;&#x2F; false 小于</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &gt; b ); &#x2F;&#x2F; false 大于</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &lt;&#x3D; b ); &#x2F;&#x2F; true 小于等于</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &gt;&#x3D; b ); &#x2F;&#x2F; true 大于等于</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a !&#x3D; b ); &#x2F;&#x2F; false 不等</span><br></pre></td></tr></table></figure>

<ul>
<li>全等比较：先比较数据类型，再比较值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 1 , b &#x3D; &quot;1&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a &#x3D;&#x3D;&#x3D; b );&#x2F;&#x2F; false 全等</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( a !&#x3D;&#x3D; b ); &#x2F;&#x2F; true 全不等</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>逻辑运算符</strong>：如果你是一个程序猿 并且 长度没有26 那么你是一个单身狗~</p>
<ul>
<li>比较运算符两边的数据然后返回比较的结果</li>
<li>&amp;&amp;（与,并且），||（或，或者），!（非，取反）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">job &#x3D; &quot;程序猿&quot;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len &#x3D; 25;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bool &#x3D; (job  &#x3D;&#x3D; &quot;程序猿&quot;) &amp;&amp; ( len &lt; 26 );</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( &quot;你是一个单身狗：&quot; + bool )</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>
</li>
<li><p>通过逻辑运算符的特性，我们可以做一些代替判断的事情</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置默认值</span><br><span class="line">function fn(a)&#123;</span><br><span class="line">  a &#x3D; a || 0;</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法参数是否传入</span><br><span class="line">function fn1(argFn)&#123;</span><br><span class="line">  argFn &amp;&amp; argFn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="03-元素获取与流程控制语句"><a href="#03-元素获取与流程控制语句" class="headerlink" title="03 - 元素获取与流程控制语句"></a>03 - 元素获取与流程控制语句</h1><h2 id="3-01-JavaScript的选择器"><a href="#3-01-JavaScript的选择器" class="headerlink" title="3.01 - JavaScript的选择器"></a>3.01 - JavaScript的选择器</h2><ul>
<li><p><strong>基本的获取元素的方式</strong></p>
<ul>
<li><p>ID名获取：document.getElementById(“idName”);</p>
</li>
<li><p>标签名获取：document.getElementsByTagName(“tagName”);</p>
</li>
<li><p>class名获取：document.getElementsByClassName(“className”);</p>
</li>
<li><p>name名获取：document.getElementsByName(“name”);</p>
</li>
<li><p>文档唯一元素：document.body  document.title  document.head</p>
</li>
<li><pre><code>&lt;div id=&quot;box&quot; class=&quot;wrap&quot;&gt;&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.getdocument.getElementById(&quot;box&quot;);   // id 获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  box;                                          //  id可以直接通过id名字获取元素
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.getElementsByClassName(&quot;wrap&quot;);      // class 获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.getElementsByTagName(&quot;div&quot;);         // 标签名 获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **HTML5新增**</span><br><span class="line"></span><br><span class="line">  - 获取单个元素：document.querySelector(selector);</span><br><span class="line"></span><br><span class="line">  - 获取元素集合：document.querySelectorAll(selector);</span><br><span class="line"></span><br><span class="line">  - 实例：</span><br></pre></td></tr></table></figure>
&lt;div id=&quot;wrap&quot;&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  &lt;div class=&quot;box&quot;&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    &lt;p&gt;&lt;/p&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  &lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.querySelector(&quot;#wrap&quot;);// id获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.querySelectorAll(&quot;.box&quot;);// class 获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.querySelectorAll(&quot;p&quot;);// 标签名 获取
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  document.querySelectorAll(&quot;#wrap .box p&quot;);// 嵌套写法
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **获取节点对象下的元素**</span><br></pre></td></tr></table></figure>
&lt;div id=&quot;wrap&quot;&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;div class=&quot;box&quot;&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  &lt;p&gt;&lt;/p&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
// #wrap box p
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
document.getElementById(&quot;wrap&quot;).getElementsByClassName(&quot;box&quot;)[0].getElementsByTagName(&quot;p&quot;);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;/script&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- **length 属性**：length属性下存储着元素集合的总长度</span><br></pre></td></tr></table></figure>
&lt;div class=&quot;wrap&quot;&gt;box1&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;div class=&quot;wrap&quot;&gt;box2&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
&lt;div class=&quot;wrap&quot;&gt;box3&lt;/div&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  var dWrap = document.getElementsByClassName("wrap");
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  console.log( dWrap.length );// 3
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **[ ] 下标**</span><br><span class="line"></span><br><span class="line">  - 当获取的元素为一个集合的时候通过下标可以找到具体的对应序列的元素</span><br><span class="line">  - 下标的序列从 0 开始</span><br></pre></td></tr></table></figure>
<div class="wrap">box1</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="wrap">box2</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="wrap">box3</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  var dWrap = document.getElementsByClassName("wrap");
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  console.log( dWrap[0] );// 获取 box1
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 3.02 - 元素，属性操作</span><br><span class="line"></span><br><span class="line">- **自带标签属性操作**：元素本身存在的标签属性，获取设置的方式直接通过 . 方式 不能删除</span><br><span class="line">  - class 属性的获取的时候需要改为，className</span><br><span class="line">  - float 属性需要修改为 styleFloat（IE）  cssFloat（标准）</span><br><span class="line">  - 自身不拥有的属性无法获取</span><br></pre></td></tr></table></figure>
<div id="boxId" class="boxClass" color="red" goudan="狗蛋"></div>

</li>
</ul>
<script>
    var dBox = document.getElementById("boxId");
    console.log( dBox.id ); // boxId 直接获取
    console.log( dBox.className );  // boxClass class修改为className
    console.log( dBox.color );  // undefined div 本身不存在 color 属性
    console.log( dBox.goudan ); // undefined 无法直接获取自定义属性
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **自定义标签属性**：元素自身不存在的标签属性，通常自定义用来存储数据</span><br></pre></td></tr></table></figure>
<div id="boxId" goudan="狗蛋"></div>

<script>

    var dBox = document.getElementById("boxId");
    // 获取
    console.log( dBox.getAttribute("goudan") ); // "狗蛋"
    // 设置
    dBox.setAttribute("goudan","狗蛋儿");
    console.log( dBox.getAttribute("goudan") ); // "狗蛋儿"
    // 删除
    dBox.removeAttribute("goudan");
    console.log( dBox.getAttribute("goudan") ); // null

</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **元素对象下的属性**</span><br><span class="line"></span><br><span class="line">  &gt; 事实上除了自定义属性之外，标签自带的属性都是元素对象下原有的属性，所以除开我们在html标签中使用到的标签自带属性之外，元素对象在JavaScript中还有诸多的属性，这些属性是标签的各个相关信息事件等，并且我们可以为元素对象添加属性</span><br><span class="line"></span><br><span class="line">  - style：标签的样式属性，可以获取和修改标签的行内样式</span><br><span class="line">    - 可以设置和获取标签的&#96;行内样式&#96;</span><br><span class="line">    - 覆盖之前的样式</span><br><span class="line">    - 获取 - 连接的组合属性时需要改为驼峰写法</span><br><span class="line">  - style.cssText：设置多个样式</span><br><span class="line">  - innerHTML：元素的所有内容，包括标签节点</span><br><span class="line">    - 设置内容的时候覆盖原有的内容</span><br><span class="line">  - innerText：元素的文本内容，不包括标签节点</span><br><span class="line">    - 设置内容的时候覆盖原有的内容</span><br></pre></td></tr></table></figure>
  <div id="box">
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    <p>hello box</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </div>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      var dBox = document.getElementById("box");
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      // 设置样式
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.style.width = "100px";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.style.height = "100px";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.style.backgroundColor = "red";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.style.cssText = "margin:20px auto;border:5px solid blue;";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      // 获取内容
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log(dBox.innerHTML); // "<p>hello box</p>"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log(dBox.innerText); // "hello box"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      // 设置内容
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.innerHTML = "<div>hello world!</div>";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 自定义属性：自定属性的作用类似于变量，我们可以定义一个可供读写的属性名，存储任何数据</span><br></pre></td></tr></table></figure>
  <div id="box">
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    <p>hello box</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </div>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      var dBox = document.getElementById("box");
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      dBox.goudan = 1;
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log(dBox.goudan); // 1
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **获取元素的样式属性值**</span><br><span class="line"></span><br><span class="line">  - 标准：getComputedStyle(dom)[attr]</span><br><span class="line">  - IE低版本：dom.currentStyle[attr]</span><br><span class="line"></span><br><span class="line">## 3.03 - 流程控制语句</span><br><span class="line"></span><br><span class="line">&gt; 什么是流程控制？</span><br><span class="line">&gt;</span><br><span class="line">&gt; ​	我是谁？我在那？我要做什么？</span><br><span class="line">&gt;</span><br><span class="line">&gt; 代码的一般执行顺序为从上到下，从左到右，但是很多时候会对执行**选择性**和**重复**等等的控制</span><br><span class="line"></span><br><span class="line">- **条件控制语句（判断）**：站在人生的十字路口上</span><br><span class="line"></span><br><span class="line">  &gt; 执行过程中，当需要涉及到满足某些条件，才能执行对应的语句时，就需要用到条件判断，判断的依据是布尔值</span><br><span class="line"></span><br><span class="line">  1. 单次判断：if( boolean )&#123;    &#125;;</span><br></pre></td></tr></table></figure>
  // 小括号中为true时，才会执行括号之后花括号中的语句
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  if( true ){ alert( "hello world" ); } // "hello world"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  if( false ){ alert( "hello IF" ); }   // 不会执行
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 是，否则判断：if( boolean )&#123;  &#125;else&#123;  &#125;</span><br></pre></td></tr></table></figure>
  // 小括号中为true时执行第一个花括号中的语句，否则执行else之后的花括号中的语句
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  if( false ){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    alert( "hello world" ); // 不会执行
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  }else{
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    alert( "hello IF" );  // "hello IF"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 三目运算：boolean ? trueValue : falseValue;</span><br><span class="line">   - 效果类似于 if else 判断 但是该表达式为会返回 判断结果 的表达式</span><br></pre></td></tr></table></figure>
  var name = "goudan";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  var val = name = "goudan"? name + "帅!!!" : name + "不认识！";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  console.log( "goudan帅!!!" );
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 全等判断：switch( 被比较的数据 )&#123; case 进行比较的数据: break; default break;&#125;</span><br><span class="line"></span><br><span class="line">&gt; 只能进行单个数据与多个数据之间的**全等**比较，适用于被比较的条件恒定时</span><br></pre></td></tr></table></figure>
  var a = "狗蛋";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  switch( a ){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    case "大锤":
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      alert( a + " 是一个程序猿~");
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      break;
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    case "尼玛":
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      alert( a + " 是一个大头变态~");
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      break;
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    case "狗蛋":
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      break;
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      alert( a + " r 26cm~"); // " 狗蛋r 26cm~"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    default:
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      alert( a + " 帅哥~" );
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  /*
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      break
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
          如果进行单次判断，必须在case的执行语句最后，加上 break 跳出之后的判断否
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
          否则将继续下一个case判断（case穿透），直到遇到一个break return 否则会执行到判断语句最后
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      default
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
          前面的条件都不满足的时候执行
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  */
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **循环**：爱做的事情重复做，日复一日，年复一年~</span><br><span class="line"></span><br><span class="line">  &gt; 循环常重复执行一段相同的代码，就好像你在代码中连续写了N次相同的代码，我们可以设定重复的起点，次数，和结束条件</span><br><span class="line"></span><br><span class="line">  - for 循环：常用于与数值相关的循环，如限定次数的循环，需要单独得到递增递减的数值等，循环的判断条件通常为数值之间的比较</span><br></pre></td></tr></table></figure>
  // 循环打印数字 0 1 2
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  for(var i=0;i<3;i++){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    console.log(i); // 0 1 2
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  /*
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  for( 1; 2; 4){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    3<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  执行顺序：1     2 3 4 2 3 4 2 3 4 …. 4 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>      1 只有在开始时执行一次<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>      2 结束的流程最终为 4 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  */<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  // 拆分的表示<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var i = 0;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  console.log(i); // 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  i ++;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  console.log(i); // 1<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  i ++;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  console.log(i); // 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  i ++;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- while 循环：用于条件判断的循环，通常使用在循环的判断条件为非数值的情况</span><br></pre></td></tr></table></figure><br>  var dream = prompt(“少年请说出你的梦想！”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  while( dream != “Java” ){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>        dream = prompt(dream+”??? 难道你不想学 Java 嘛？”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  alert(“少年前途无量啊！”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- do... while 循环：与 while 几乎一致，只是会优先执行一遍循环体中的代码</span><br></pre></td></tr></table></figure><br>   var dream;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    do{<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>          dream = prompt(“少年请说出你的梦想！”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    }while( dream != “Java” );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>alert(&quot;少年前途无量啊！&quot;);</code></pre>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **break 与 continue**</span><br><span class="line"></span><br><span class="line">  - break：终止循环体继续循环</span><br></pre></td></tr></table></figure>
<p>  for(var i=0;;i++){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    if(i == 10)break; // 当i的值等于10的时候结束本次循环<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    console.log(i); // 0~9<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- continue：跳过本次循环</span><br></pre></td></tr></table></figure><br>  for(var i=0;i&lt;10;i++){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    if(i % 2)continue; // 跳过奇数<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    console.log(i); // 0 2 4 6 8<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- **控制语句相关**</span><br><span class="line"></span><br><span class="line">  - if 循环 的代码体中，如果只有一条语句，那么可以省略花括号</span><br></pre></td></tr></table></figure><br>  // if(true){alert(‘hello’);}; // 结果与下边一致<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  if(true)alert(‘hello’);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 3.04 - 类型转换</span><br><span class="line"></span><br><span class="line">&gt; 概念：各种基本的数据类型可以进行转换，JavaScript 提供了对应的方法来进行这些转换，但是很多时候这些转换是默认进行的</span><br><span class="line">&gt;</span><br><span class="line">&gt; 作用：很多时候我们得到的数据类型不是我们最终想要的，所以需要进行转换的处理，比如字符串的数字转换成正常数字</span><br><span class="line"></span><br><span class="line">- **强制转换**：大佬女装术~</span><br><span class="line"></span><br><span class="line">  - Number();</span><br><span class="line">  - parseInt();</span><br><span class="line">  - parseFloat();</span><br><span class="line">  - String();</span><br><span class="line"></span><br><span class="line">- **隐式转换**</span><br><span class="line"></span><br><span class="line">  - 运算符操作的时候</span><br></pre></td></tr></table></figure><br>  // 字符串会被默认的转换为普通数字<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var a = 2;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var b = “2”;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a * b ); // 4<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a - b ); // 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a / b ); // 1<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a % b ); // 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // null false undefined 会被默认的转换成 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a - null ); // 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a + false ); // 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a * undefined ); // 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // true 会被转换成 1<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a - true ); // 2<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 比较运算的时候</span><br></pre></td></tr></table></figure>
<p>  var a = 10;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var b = “5”;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var c = “15”;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var d = “16”;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a &lt; b );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( b &lt; c );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( c &lt; d );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // 与字符串的比较为 ASCII 码的比较<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 特殊转换：以下的5个数据在直接进行判断的时候会被转换成false  其他的均为true</span><br><span class="line"></span><br><span class="line">&gt; null   undefined   &quot;&quot; （空字符串） NaN  0</span><br></pre></td></tr></table></figure><br>  console.log( 0?1:0 ); // 0<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  if( “” ){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>     alert(“我是真!”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- **运算符优先级以及括号**：行行行！你NB，我叫表哥去！</span><br><span class="line"></span><br><span class="line">  - 当运算符凑到一块的时候运算的先后的顺序...</span><br><span class="line">  - 从大到小：小于等于（&#96;&lt;&#x3D;&#96;)、严格相等（&#96;&#x3D;&#x3D;&#x3D;&#96;）、或（&#96;||&#96;）、三元（&#96;?:&#96;）、等号（&#96;&#x3D;&#96;）</span><br><span class="line">  - 从大到小：! 、&amp;&amp;、|| </span><br><span class="line">  - 从大到小：* &#x2F;  、+ -</span><br><span class="line">  - 括号的优先级最高</span><br></pre></td></tr></table></figure><br>  var bool = false || false &amp;&amp; 2 &lt; 3 || !false || 0?1:0 &amp;&amp; “a” &lt;= “b”;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 04 - 函数(方法)</span><br><span class="line"></span><br><span class="line">## 4.01 - 概述 </span><br><span class="line"></span><br><span class="line">&gt; 函数是一段可以反复调用的代码块，其存在的意义是为了做重复的事情，同时也可以接收不同的参数，与一个返回值</span><br><span class="line"></span><br><span class="line">- **函数的申明方式**</span><br><span class="line"></span><br><span class="line">  1. 命名函数</span><br></pre></td></tr></table></figure><br>  // function 标识符(argmengs){  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  function helloFn(args){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“传入的是：” + args );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  helloFn(“amo”); // “传入的是：amo”<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 函数表达式</span><br></pre></td></tr></table></figure><br>  // 1. 赋值的方式<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var fn = function(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“赋值”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  };<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // 2. 函数自执行<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // 前面的表达式必须 ; 结束<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // + - ! ~<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  !function(){ alert(“!function”); }();<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // ()<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  (function(){ alert( “(function)()” ); })();<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  (function(){ alert( “(function())” ); }());<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 箭头函数（ES6）</span><br></pre></td></tr></table></figure><br>  var fn = (a)=&gt;{alert(a)};<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  fn(1);// 1<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- **重复申明函数**</span><br><span class="line"></span><br><span class="line">  - 函数重复申明时，之后的覆盖之前的</span><br></pre></td></tr></table></figure><br>  function a(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“第一个”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  function a(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“第二个”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  a(); // “第二个”<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 与变量名重复时</span><br></pre></td></tr></table></figure><br>  // 1. 没有赋值的情况下 函数的优先级高于变量<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  function a(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“第一个”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var a;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a ); // 函数块<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  // 2. 赋值后则为变量值<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  a = 10;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( a ); // 10<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **函数名提升**</span><br><span class="line"></span><br><span class="line">  - 函数申明的方式定义的函数，和变量一样，会被提升到最顶部，所以调用函数可以写在函数定义之前</span><br></pre></td></tr></table></figure><br>  fn(); // “hello function”<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  function fn(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    console.log(“hello function”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **函数相关**</span><br><span class="line"></span><br><span class="line">  - 函数是一等公民</span><br><span class="line"></span><br><span class="line">  &gt; JavaScript语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</span><br><span class="line">  &gt;</span><br><span class="line">  &gt; 由于函数与其他数据类型地位平等，所以在JavaScript语言中又称函数为第一等公民。</span><br><span class="line"></span><br><span class="line">  - 函数的申明规范</span><br><span class="line"></span><br><span class="line">  &gt; 不能在非函数的块中申明函数，比如 if for try 等函数块中，虽然不会报错能够运行</span><br><span class="line"></span><br><span class="line">## 4.02 - 函数执行，返回值，递归</span><br><span class="line"></span><br><span class="line">### 1.  函数的执行方式</span><br><span class="line"></span><br><span class="line">&gt; 函数定义之后如果不进行调用，函数体内定义的语句并不会执行，所以函数定义了之后需要进行调用才有存在的价值</span><br><span class="line"></span><br><span class="line">- **括号调用**：函数名，或者函数表达式直接在最后添加一对小括号，就可以直接调用执行函数</span><br></pre></td></tr></table></figure><br>// 函数名加括号执行<br>fn(); // “我被调用啦！”<br>function fn(){<br>  alert(“我被调用啦！”);<br>}</p>
<p>// 函数表达式自执行<br>(function(){<br>  alert(“我也执行啦！！！”);// “我也执行啦！！！”<br>})();</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **事件调用**：将函数与事件进行绑定，当对应事件触发的时候，会执行与之绑定的函数</span><br></pre></td></tr></table></figure>
<p>// 点击文档的时候触发函数<br>document.onclick = function(){<br>  alert(“不要点我！！”);<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **方法调用**：call()  apply() bind()</span><br><span class="line"></span><br><span class="line">### 2. 函数返回值 </span><br><span class="line"></span><br><span class="line">&gt; 每个函数执行过后必定有一个返回值，默认情况下返回 undefined 我们可以通过 return 自己定义函数的返回值，返回值可以是任意的数据类型，包括函数，并且许多时候我们定义的函数的目的就是通过 return 得到一个对应的返回值</span><br><span class="line"></span><br><span class="line">- **默认返回 undefined**</span><br></pre></td></tr></table></figure>
<p>function fn(){<br>  alert(“我执行完后返回 undefined<del>“);<br>}<br>var fnReturnValue = fn(); // “我执行完后返回 undefined</del>“<br>console.log( fnReturnValue ); // undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **自定义返回值**</span><br></pre></td></tr></table></figure>
<p>function fn(){<br>  alert(“我执行完后返回 hello<del>“);<br>  return “hello</del>“;<br>}<br>console.log( fn() ); // 弹出：”我执行完后返回 hello<del>“  打印：”hello</del>“</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **return 关键字相关**</span><br><span class="line"></span><br><span class="line">  - return 语句会终止函数，之后的语句都不会执行</span><br><span class="line">  - 可以返回任意数据类型</span><br><span class="line">  - return 之后可以是一个表达式，并且表达式会进行运算，最终的返回值为运算结果</span><br></pre></td></tr></table></figure>
<p>  function fn(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    return 10&lt;2? “hello<del>“ : “world</del>“;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(“hello world<del>“); // 不会执行<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( fn() ); // “world</del>“<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3. 递归</span><br><span class="line"></span><br><span class="line">&gt; 简单来说，函数在执行的过程中调用自己，就是递归。当函数的逻辑遵循一定规律重复的时候我们就可以通过递归来实现，比如递归求阶乘，斐波那契数列等等</span><br><span class="line">&gt;</span><br><span class="line">&gt; 使用的递归的时候从递归的特性来说，必须存在两个条件：</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1. 函数执行逻辑存在相同的规律</span><br><span class="line">&gt; 2. 突破点，及终止递归的条件，否则递归将无限调用</span><br><span class="line"></span><br><span class="line">- **递归求阶乘**</span><br></pre></td></tr></table></figure><br>/* 求 1~n 的阶乘<br>    1. 规律：n * (n - 1)<br>    2. 突破点：n &lt; 1<br>*/<br>var n = 10;<br>function factorial(){<br>  var _n = n–;<br>  if(_n&lt;1){return 1;}<br>  return _n * factorial();<br>}<br>console.log( factorial() ); // 3628800</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 4.03 - 作用域</span><br><span class="line"></span><br><span class="line">&gt; 不同函数块中的定义的变量或者方法，实际上是不一定能相互访问的，作用域（scope）就是指变量或者方法可以访问的范围，遵循一定的规则，通常我们可以把作用域分为两种：</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1. **全局作用域**：无论在哪里都可以访问，其一般直接申明在script标签下</span><br><span class="line">&gt; 2. **局部作用域**：只在局部生效，定义在函数体中</span><br><span class="line"></span><br><span class="line">- **域与域之间的访问规则**</span><br><span class="line"></span><br><span class="line">  - 全局变量或者方法，可以在任意位置访问或修改</span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    var a = "全局变量";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function fn(){alert("全局函数");}
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    /* 全局访问 */
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    console.log( a ); //  "全局变量"
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    fn(); // alert("全局函数")
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function childFn(){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
       /* 局部访问 */ 
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log( a );
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      fn();
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    childFn();// 打印："全局变量"  弹出：alert("全局函数")
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 局部变量或者方法，只能在局部或者其子作用域访问或修改</span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function childFn(){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      var a = "局部变量";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      function fn(){alert("局部函数");}
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
       /* 局部访问 */ 
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log( a );
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      fn();
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    childFn();// 打印："全局变量"  弹出：alert("全局函数")
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    /* 全局访问 */
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    console.log( a ); //  error
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    fn(); // error
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 同级作用域下的变量或者方法不能相互访问或修改</span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function fn_1(){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      var a_1 = "a_1变量";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      function fn_1Fn(){alert("a_1函数");}
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function fn_2(){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      var a_2 = "a_2变量";
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      function fn(){alert("a_2函数");}
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      // 无法访问 fn_1 的成员
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      console.log(a_1); // error
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
      fn_1Fn(); // error 
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    fn_2();
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 总结：儿子能用爸爸的，爸爸不能用儿子的，兄弟明算账</span><br><span class="line"></span><br><span class="line">- **就近原则**</span><br><span class="line"></span><br><span class="line">  - 当父域与子域之间有同名的变量或者方法的时候并不会冲突，但是当进行成员访问的时候遵循就近原则</span><br><span class="line">  - 同时子级的变量的改变不会影响父级，父级的变量改变也不会影响子级</span><br></pre></td></tr></table></figure>
<script>
  var a = "全局变量";
  function fn(){alert("全局函数");}

  function fnChild(){
    var a = "局部变量";
    function fn(){alert("局部函数");}

    // 优先访问就近的属性和方法
    console.log(a); // "局部变量"
    fn(); // alert("局部函数")
  }
  fnChild();

</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 4.04 - 参数列表</span><br><span class="line"></span><br><span class="line">&gt; 函数调用时都可以为其传递一个或多个参数，根据参数的不同，同一个函数运行后的结果就有可能不同，实际上参数列表的设置类似于定义一个局部变量保存外部的值再进行使用</span><br><span class="line"></span><br><span class="line">- **参数列表设置**</span><br><span class="line"></span><br><span class="line">  - 形式参数：写在方法定义的小括号中，可以是任意合法标识符，其作用类似于局部变量</span><br><span class="line">  - 实际参数：通常写在方法调用时的小括号中，与形参的顺序一一对应，实际参数可以是任意的数据类型或者变量，或者是一个表达式，当为一个表达式的时候会把运算结果作为参数传递</span><br></pre></td></tr></table></figure>
<p>  var a = 2;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  var b = fn( 1 , a , a + 1 ); // 实际参数（实参） 1 2 3<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( b );// 6<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  function fn(a,b,c){ // 形式参数（形参）<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    return a + b + c;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 参数列表相关</span><br><span class="line"></span><br><span class="line">  - 方法调用时没有实参传递，则默认值为 undefined</span><br><span class="line">  - 实质上形参在函数内等同于申明了一个对应的局部变量</span><br></pre></td></tr></table></figure><br>    function fn(a){<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>      console.log(a);<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    }<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    fn(10);<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
// 基本等同于
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
function fn_(){
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  var a = 10;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  console.log(a);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
fn();
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 传参方式求阶乘</span><br></pre></td></tr></table></figure></code></pre><p>  function factorial(n){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    if(n&lt;1){return 1;}<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    return n * factorial(n-1);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  console.log( factorial(10) ); // 3628800<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- arguments  参数集：在函数体内 arguments 代表所有实参的集合，哪怕没有形参与之对应，我们可以通过下标获取到对应序列的参数</span><br></pre></td></tr></table></figure><br>  function a(a){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    var args = arguments;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    alert(a); // 1<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    for(var i=0;i&lt;args.length;i++){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>       alert(args[i]); // 1 2 3<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  a( 1 , 2 , 3 );<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 4.05 - 闭包</span><br><span class="line"></span><br><span class="line">&gt; 简单来说闭包是，一个定义在函数内部的函数，访问了外部函数的变量，但是并没有在所定义的函数体内直接执行。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 闭包最大的特点，就是它可以访问并存储外部函数的变量。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 闭包存在的意义在于，让局部变量被**存储**或者通过返回值等方式和**外界产生联系**</span><br><span class="line"></span><br><span class="line">- **实例1**</span><br></pre></td></tr></table></figure>
<p>function fn(n){<br>  function fn_(){<br>    console.log(n ++);<br>  }<br>  return fn_;<br>}<br>var f = fn(0);<br>f(); // 0<br>f(); // 1<br>f(); // 2<br>f(); // 3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **实例2**</span><br></pre></td></tr></table></figure>
<p>function fn(n){<br>  function fn_(){<br>    console.log(n ++);<br>  }<br>  document.onclick = fn_; // 点击一次document n ++ 一次<br>}<br>fn(0);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 05 - 事件</span><br><span class="line"></span><br><span class="line">## 05.01 - 事件概述</span><br><span class="line"></span><br><span class="line">&gt; 一般的直接被执行的js代码，在浏览器加载完成的时候，再浏览器重新加载之前不会再次执行（除开用定时器延迟执行的代码），那么就意味着异步的代码执行操作需要通过其它的方式触发，那么触发的时机，通常是用户做了某些操作之后进行的，像这种用户的操作被称之为“事件”</span><br><span class="line"></span><br><span class="line">### 常用事件列表</span><br><span class="line"></span><br><span class="line">- **鼠标事件**</span><br><span class="line">  - 单击：click</span><br><span class="line">  - 双击：dblclick</span><br><span class="line">  - 移入：mouseover、mouseenter</span><br><span class="line">  - 移出：mouseout、mouseleave</span><br><span class="line">  - 按下：mousedown</span><br><span class="line">  - 抬起：mouseup</span><br><span class="line">  - 移动：mousemove</span><br><span class="line">  - 备注</span><br><span class="line">    - 事件在使用属性赋值的方式进行绑定的时候，需要添加 on 在事件名前面</span><br><span class="line">    - mouseover &#x2F; mouseout 与 mouseenter &#x2F; mouseleave 的区别在于，前者在其子级上同样会触发事件（冒泡），而后者不会</span><br><span class="line">- **窗口事件**</span><br><span class="line">  - 浏览器窗口大小改变：resize</span><br><span class="line">  - 窗口滚动：scroll</span><br><span class="line">- **键盘事件**</span><br><span class="line">- **文档事件**</span><br><span class="line">- **表单事件**</span><br><span class="line"></span><br><span class="line">### 事件的定义方法（事件绑定）</span><br><span class="line"></span><br><span class="line">- 事件的触发实际上是执行了一个函数</span><br><span class="line"></span><br><span class="line">- 事件触发的对象可以是，dom节点，window，document，XMLHttpRequest，等对象</span><br><span class="line"></span><br><span class="line">- 绑定事件实例：元素被点击时候执行弹窗</span><br><span class="line"></span><br><span class="line">  - 匿名函数</span><br></pre></td></tr></table></figure>
<p>  // 给document绑定一个点击事件<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  document.onclick = function(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>      alert(“hello world!”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 命名函数</span><br></pre></td></tr></table></figure><br>  // 给document绑定一个点击事件 fn 不需要括号<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  document.onclick = fn;<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  // 定义需要被绑定的事件<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  function fn(){<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>      alert(“hello world!”);<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 标签属性</span><br></pre></td></tr></table></figure><br>  <!-- 通过标签属性绑定 --><br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  <div id="box" onclick="fn()"></div><br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    function fn(){
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
        alert("hello world!");
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    }
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  </script>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### 事件解绑</span><br><span class="line"></span><br><span class="line">- 事件重新赋值为null</span><br></pre></td></tr></table></figure>
<div id="box"></div>

<script>
  var dBox = document.getElementById("box");
  // 绑定
  dBox.onclick = fn;
  // 解绑
  dBox.onclick = null;

  function fn(){
      alert("hello world!");
  }
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 重新绑定新的事件</span><br></pre></td></tr></table></figure>
<div id="box"></div>

<script>
  var dBox = document.getElementById("box");
  // 绑定
  dBox.onclick = fn;
  // 再次绑定新的事件
  dBox.onclick = fn_new;

  function fn(){
      alert("fn");
  }
  function fn_new(){
      alert("fn_new");
  }
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 05.02 - this</span><br><span class="line"></span><br><span class="line">&gt; this 是一个关键字，代表当前方法调用的时候所属的对象，也就是说只有当方法被调用的时候 this 的指向才能明确</span><br><span class="line"></span><br><span class="line">### this 的指向</span><br><span class="line"></span><br><span class="line">- **括号直接调用时 this 指向 window 对象**</span><br></pre></td></tr></table></figure>
<p>function fn(){<br>  console.log(“我属于：” + this);<br>}<br>// 方法名直接括号调用<br>fn(); // “我属于：[object Window]”</p>
<p>// 在子级作用域中调用直接括号调用<br>(function(){<br>  fn();// “我属于：[object Window]”<br>}());</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **方法调用时 this 指向 触发事件的对象**</span><br></pre></td></tr></table></figure>
<div id="box">点我点我！</div>
<script>
  var dBox = document.getElementById("box");
  function fn(){
    console.log("我属于：" + this);
  }

<p>  // document 调用<br>  document.onclick = fn; // “我属于：[object HTMLDocument]”</p>
<p>  // 标签元素调用<br>  dBox.onclick = fn; // “我属于：[object HTMLDivElement]”<br></script></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### this 的使用场景</span><br><span class="line"></span><br><span class="line">- **点击修改，获取元素自身的属性**</span><br></pre></td></tr></table></figure>
<div>点我点我！</div>
<div>点我点我！</div>
<div>点我点我！</div>
<script>
  var dDiv = document.getElementsByTagName("div");
  function setColor(){
    this.style.color = "red";
  }
  function getHTML(){
    console.log( this.innerHTML );
  }
  for(var i=0;i<dDiv.length;i++){
    dDiv[i].ondblclick = setColor;
    dDiv[i].onclick = getHTML;
  }
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 获取存储的自定义属性数据</span><br></pre></td></tr></table></figure>
<div>点我点我！</div>
<div>点我点我！</div>
<div>点我点我！</div>
<script>
  var dDiv = document.getElementsByTagName("div");
  for(var i=0;i<dDiv.length;i++){
    dDiv[i].index = i;
    dDiv[i].onclick = function(){
      alert(this.index);
    };
  }
</script>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 06 - String，Number</span><br><span class="line"></span><br><span class="line">## 6.01 - Number</span><br><span class="line"></span><br><span class="line">&gt; 关于数字的一些特性，属性与方法</span><br><span class="line"></span><br><span class="line">### **数字**</span><br></pre></td></tr></table></figure>
// 0123456789
var num = 10;
console.log(num);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\###特殊数字值</span><br><span class="line"></span><br><span class="line">- **NaN**：非数字</span><br><span class="line"></span><br><span class="line">### 数字相关方法</span><br><span class="line"></span><br><span class="line">- **全局方法**</span><br><span class="line"></span><br><span class="line">  - number( val )：把参数转换成数字类型，如果不能转换则返回NaN</span><br><span class="line">  - parseInt( val)：把参数转换成整数类型，如果不能转换则返回NaN</span><br></pre></td></tr></table></figure>
  var n = 100;
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  console.log( parseInt(n) );
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - parseFloat( val )：把参数转换成小数类型，如果不能转换则返回NaN</span><br><span class="line">  - isNaN( val )：判断参数是否为NaN</span><br><span class="line"></span><br><span class="line">- **数字方法**</span><br><span class="line"></span><br><span class="line">  - number.toString( [radix] )：将数字转为字符串带进制参数</span><br><span class="line"></span><br><span class="line">  - number.toFixed( Int )：让数字保留对应位数的小数，四舍五入</span><br><span class="line"></span><br><span class="line">  - 备注：</span><br><span class="line"></span><br><span class="line">    1. 对整数使用数字方法时，避免小数点的歧义需要先把数字放在括号里</span><br></pre></td></tr></table></figure>
    // 10.toString();// error
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
    (10).toString(); // "10"
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 6.20 - String</span><br><span class="line"></span><br><span class="line">&gt; 字符串，0个或者多个字符的排列组合，放在单或者双引号中</span><br><span class="line"></span><br><span class="line">### 字符串的特性</span><br><span class="line"></span><br><span class="line">- **关于引号**：单双引号的表示是完全一样的，但是需要保证统一，一个字符串中需要用到引号字符时，需要进行转义或者使用单双相互嵌套的形式</span><br></pre></td></tr></table></figure>
"<a href=\"#\"></a>";// 转义引号
'<a href="#"></a>';// 单双嵌套
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **换行**：普通字符串无法正常换行，会抛出异常，换行需要使用一下方式</span><br></pre></td></tr></table></figure>
// 1. 换行前添加转义符
'<a href="#">\
    hello world\
</a>';
// 2. 拼接
'<a href="#">'+
    'hello world'+
'</a>';

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **字符串可读不可写**：字符串可以通过下标直接读取对应序列的字符但是无法被修改</span><br></pre></td></tr></table></figure>
<p>var str = ‘abcd’;<br>console.log( str[1] );// ‘b’<br>str[1] = ‘e’;<br>console.log( str ); // ‘abcd’</p>
<p>```</p>
<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><ul>
<li><code>\n</code> ：换行符</li>
<li><code>\r</code> ：回车键</li>
<li><code>\t</code> ：制表符</li>
<li><code>\&#39;</code> ：单引号</li>
<li><code>\&quot;</code> ：双引号</li>
<li><code>\\</code> ：反斜杠</li>
</ul>
<h3 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h3><ul>
<li>string.length：字符串的长度</li>
</ul>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>charAt(n)</td>
<td>返回指定索引位置的字符（兼容IE7-）</td>
</tr>
<tr>
<td>indexOf(str)</td>
<td>从左往右查找字符str是否在字符串中,找到返回索引,找不到返回-1</td>
</tr>
<tr>
<td>lastIndexOf(str)</td>
<td>从右往左查找字符str是否在字符串中,找到返回索引,找不到返回-1</td>
</tr>
<tr>
<td>slice(n,m)</td>
<td>返回区间(n,m]之间的字符串,不包括m索引位，n为负值的时候从字符串最后倒数至n位开始</td>
</tr>
<tr>
<td>substr(n,m)</td>
<td>返回n索引之后的m个字符</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>全部转换成小写</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>全部转换成大写</td>
</tr>
<tr>
<td>split(pattern [,length] )</td>
<td>按照pattern匹配来切分原始字符串，可选参数，返回的数组的最大长度</td>
</tr>
<tr>
<td>replace(str,replaceStr|callback)</td>
<td>在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串</td>
</tr>
<tr>
<td>trim()  trimLeft()  trimRight()</td>
<td>去除字符串两端的空格，返回一个新字符串，不改变原字符串</td>
</tr>
<tr>
<td>match(str|reg)</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>前端学习笔记</title>
    <url>/2020/04/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HTML发展历史"><a href="#HTML发展历史" class="headerlink" title="HTML发展历史"></a>HTML发展历史</h2><p>HTML超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。您可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。</p>
<pre><code>1989年，Tim berners-Lee（蒂姆•博纳斯•李）发明了HTML语言。1990年11月，Tim berners-Lee编写出最早的Web页面。1993年发为互联网工程工作小组(IETF)工作草案发布超文本标记语言，并非标准的工作草案。1995年，W3C组织成立，规范了HTMl的标准，从而奠定了Web标准的开发的基础。</code></pre><p>HTMl从诞生至今，经历了近30年的发展，其中有很多曲折，经历的版本发布日期如表所示</p>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">发布日期</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">超文本标记语言（第一版）</td>
<td align="center">1993年6月</td>
<td align="center">互联网工程工作小组(IETF)工作草案发布超文本标记语言，并非标准</td>
</tr>
<tr>
<td align="center">HTML2.0</td>
<td align="center">1995年11月</td>
<td align="center">作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时</td>
</tr>
<tr>
<td align="center">HTML3.2</td>
<td align="center">1996年1月14日</td>
<td align="center">W3C推荐标准</td>
</tr>
<tr>
<td align="center">HTML4.0</td>
<td align="center">1997年12月18日</td>
<td align="center">W3C推荐标准</td>
</tr>
<tr>
<td align="center">HTML4.01</td>
<td align="center">1999年12月24日</td>
<td align="center">（微小改进）W3C推荐标准</td>
</tr>
<tr>
<td align="center">ISO HTML</td>
<td align="center">2000年5月15日</td>
<td align="center">基于严格的HTML 4.01语法，是国际标准化组织和国际电工委员会的标准</td>
</tr>
<tr>
<td align="center">XHTML1.0</td>
<td align="center">20001月16日</td>
<td align="center">W3C推荐标准，后来经过修订于2002年8月1日重新发布</td>
</tr>
<tr>
<td align="center">XHTML1.1</td>
<td align="center">2001年5月31日</td>
<td align="center">2001年5月31日发布（比较XHTML1.0微小改进）</td>
</tr>
<tr>
<td align="center">XHTML2.0草案</td>
<td align="center">没有发布</td>
<td align="center">2009年,W3C停止了XHTML2.0工作组的工作</td>
</tr>
<tr>
<td align="center">HTML5草案</td>
<td align="center">2008月1日</td>
<td align="center">HTML5规范先是以草案发布，经历了漫长的</td>
</tr>
<tr>
<td align="center">HTML5</td>
<td align="center">2014年10月28日</td>
<td align="center">W3C推荐标准</td>
</tr>
</tbody></table>
<p><strong>提示：</strong></p>
<pre><code>从以上HTML的发展来看，HTMl没有1.0版本，这主要因为当时有很多不同的版本。有人认为Tim berners-Lee的版本应该为初版，他的版本没有img元素。也就是说HTML刚开始的时候仅能够显示文本信息。</code></pre><h1 id="一、html基本标签初识html"><a href="#一、html基本标签初识html" class="headerlink" title="一、html基本标签初识html"></a>一、html基本标签初识html</h1><h2 id="1-初识html"><a href="#1-初识html" class="headerlink" title="1 .初识html"></a>1 .初识html</h2><p>标签是由：小于号+中间字符+大于号组成的代码（注:代码的所有字符都由英文字符组成）<br>作用是给用户展示特定内容或是告诉浏览器与搜索引擎关于网页的部分信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;标签名&gt; --&gt;</span><br></pre></td></tr></table></figure>

<p>HTML 4.01文档的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Strict&#x2F;&#x2F;EN&quot; &quot;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;HTML 4.01:</span><br></pre></td></tr></table></figure>

<p><strong>XHTML**</strong>版本的文档类型定义**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XHTML 1.0:</span><br><span class="line"> &lt;!DOCTYPE html</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Strict&#x2F;&#x2F;EN&quot;</span><br><span class="line">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200401150054840.png#pic_center"  alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--DOCTYPE：声明文档类型，是html5  --&gt;</span><br><span class="line">&lt;!-- 根标签 --&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--  --&gt; 的专业术语称为注释标签：我们可以将一行代码的作用，含义，意图等信息写在这四个减号中间，让自己后期能够看懂之前写的什么</span><br><span class="line">&lt;!-- 单行注释 --&gt; 单行注释</span><br><span class="line">&lt;!--  </span><br><span class="line">多</span><br><span class="line">行</span><br><span class="line">注</span><br><span class="line">释</span><br><span class="line">--&gt; 多行注释</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;!-- lang：语言language    en-&gt;English  zh-CN&gt;中文 --&gt;</span><br><span class="line">    &lt;&#x2F;html&gt;</span><br><span class="line">    常用lang：</span><br><span class="line">	en-US &#x2F; en  英语 (美国)  </span><br><span class="line">	zh-CN  中文 (简体, 中国大陆) </span><br><span class="line">	zh-SG  中文 (简体, 新加坡)</span><br><span class="line">	zh-HK  中文 (繁体, 香港)     </span><br><span class="line">	zh-MO  中文 (繁体, 澳门)  </span><br><span class="line">	zh-TW  中文 (繁体, 台湾)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;!-- 头部标签：用来存放一下重要信息的 --&gt;</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;!-- meta元数据 --&gt;</span><br><span class="line">   charset 编码语言 国际通用编码 （UTF-8）中文简体（gb312）中文繁体（big5）</span><br><span class="line">    展示中文的字符集种类：</span><br><span class="line"></span><br><span class="line">    &lt;!-- gb2312(gb是国标的汉语拼音的缩写，指的是国家标准的意思)  ，包含6763个汉字   </span><br><span class="line">   gbk（国家标准扩展），包含21886个汉字</span><br><span class="line">   gb18030，包含70244个汉字</span><br><span class="line">   utf-8，包含全世界200多个国家和地区的语言文字  --&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 视口只做了解 --&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 关键词：keywords --&gt;</span><br><span class="line">   &lt;meta name&#x3D;&quot;keywords&quot; content&#x3D; &quot;男装 女装&quot;&gt;</span><br><span class="line">   &lt;!-- 描述信息 --&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面标题 --&gt;</span><br><span class="line">    &lt;title&gt;淘宝网！淘！淘我喜欢&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面当中的所有内容都要写在body里面 --&gt;</span><br><span class="line">&lt;body&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2.常用标签"></a>2.常用标签</h3><h4 id="2-1标签h1-h6，语义化标签"><a href="#2-1标签h1-h6，语义化标签" class="headerlink" title="2.1标签h1-h6，语义化标签"></a>2.1标签h1-h6，语义化标签</h4><pre><code>  &lt;h1&gt;一级标题&lt;/h1&gt;
&lt;h2&gt;二级标题&lt;/h2&gt;
&lt;h3&gt;三级标题&lt;/h3&gt;
&lt;h4&gt;四级标题&lt;/h4&gt;
&lt;h5&gt;五级标题&lt;/h5&gt;
&lt;h6&gt;六级标题&lt;/h6&gt;</code></pre><h4 id="2-2段落标签"><a href="#2-2段落标签" class="headerlink" title="2.2段落标签"></a>2.2段落标签</h4><pre><code>&lt;p&gt;今天天气正好。。。&lt;/p&gt;</code></pre><h4 id="2-3水平线标签"><a href="#2-3水平线标签" class="headerlink" title="2.3水平线标签"></a>2.3水平线标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hr&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-4块级标签"><a href="#2-4块级标签" class="headerlink" title="2.4块级标签"></a>2.4块级标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-5行内标签"><a href="#2-5行内标签" class="headerlink" title="2.5行内标签"></a>2.5行内标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-6引用标签"><a href="#2-6引用标签" class="headerlink" title="2.6引用标签"></a>2.6引用标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;&lt;&#x2F;blockquote&gt;</span><br><span class="line">blockquote标签的作用就是：在网页内容中间划分展示大段引用自古典，古籍或是名人名言的区域。</span><br></pre></td></tr></table></figure>

<h4 id="2-7加粗标签"><a href="#2-7加粗标签" class="headerlink" title="2.7加粗标签"></a>2.7加粗标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;strong&gt;加粗&lt;&#x2F;strong&gt;        &lt;!-- 加粗起强调作用 --&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;加粗&lt;&#x2F;b&gt;  &lt;!-- 淡村的视觉效果 --&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-8斜体标签"><a href="#2-8斜体标签" class="headerlink" title="2.8斜体标签"></a>2.8斜体标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;i&gt;斜体&lt;&#x2F;i&gt;</span><br><span class="line">&lt;em&gt;斜体&lt;&#x2F;em&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-下划线标签"><a href="#2-9-下划线标签" class="headerlink" title="2.9 下划线标签"></a>2.9 下划线标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br><span class="line">&lt;ins&gt;下划线&lt;&#x2F;ins&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-0删除线标签"><a href="#3-0删除线标签" class="headerlink" title="3.0删除线标签"></a>3.0删除线标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;del&gt;删除线&lt;&#x2F;del&gt;</span><br><span class="line">&lt;s&gt;删除线&lt;&#x2F;s&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-img标签"><a href="#3-1-img标签" class="headerlink" title="3.1 img标签"></a>3.1 img标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;.&#x2F;faq01.jpg&quot; alt&#x3D;&quot;&quot; title&#x3D;&quot;&quot; &gt;</span><br><span class="line">src图片地址		alt&#x3D;&quot;图片加载失败替代的文字&quot;  title&#x3D;&quot;&quot; 图片悬停提示</span><br></pre></td></tr></table></figure>

<h4 id="3-2相对路径与绝对路径"><a href="#3-2相对路径与绝对路径" class="headerlink" title="3.2相对路径与绝对路径"></a>3.2相对路径与绝对路径</h4><h5 id="1-绝对路径：从磁盘根目录出发依次寻找图片-弊端：只能在本地打开"><a href="#1-绝对路径：从磁盘根目录出发依次寻找图片-弊端：只能在本地打开" class="headerlink" title="1.绝对路径：从磁盘根目录出发依次寻找图片 弊端：只能在本地打开"></a>1.绝对路径：从磁盘根目录出发依次寻找图片 <u><strong>弊端：只能在本地打开</strong></u></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;C:\Users\Administrator\Desktop\35webstudy\images\faq01.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>2.从网络找，弊端：完全不是你自己决定的，必选联网，<strong><u>若网页原图片删除了就无法加载</u></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img rc&#x3D;&quot;https:&#x2F;&#x2F;cn.bing.com&#x2F;searchq&#x3D;%E5%9B%BE%E7%89%87&amp;qs&#x3D;n&amp;form&#x3D;QBRE&amp;sp&#x3D;-1&amp;pq&#x3D;tupan&amp;sc&#x3D;0-5&amp;sk&#x3D;&amp;cvid&#x3D;C32F69B18F4449C697CBA4D53B086BA5 alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-相对路径：从文件名出发（项目大多数都是用到相对路径）"><a href="#3-相对路径：从文件名出发（项目大多数都是用到相对路径）" class="headerlink" title="3.相对路径：从文件名出发（项目大多数都是用到相对路径）"></a>3.相对路径：从文件名出发（项目大多数都是用到相对路径）</h5><p>当前目录./（可以省略的）<br>返回上一级../</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;.&#x2F;faq01.jpg&quot; alt&#x3D;&quot;&quot; title&#x3D;&quot;&quot; &gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2音视频展示标签"><a href="#3-2音视频展示标签" class="headerlink" title="3.2音视频展示标签"></a>3.2音视频展示标签</h4><p>controls播放按钮</p>
<p>controls=”controls”可以直接写controls<br>3.2视频展示标签video</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video src&#x3D;&quot;xxx.mp4&quot; controls&#x3D;&quot;controls&quot;&gt;&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>

<p>3.2音频展示标签audio </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;audio src&#x3D;&quot;http:&#x2F;&#x2F;vfx.mtime.cn&#x2F;Video&#x2F;2019&#x2F;03&#x2F;21&#x2F;mp4&#x2F;190321153853126488.mp4&quot; controls&gt;&lt;&#x2F;audio&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-a标签超链接标签"><a href="#3-3-a标签超链接标签" class="headerlink" title="3.3 a标签超链接标签"></a>3.3 a标签超链接标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.taobao.com&quot;&gt;淘宝&lt;&#x2F;a&gt;</span><br><span class="line">href：地址 </span><br><span class="line">target&#x3D;&quot;_blank&quot;：在新窗口打开 </span><br><span class="line">target&#x3D;&quot;_new&quot;：在新窗口打开，但只能打开一个</span><br><span class="line">target&#x3D;&quot;_self&quot;：在当前窗口打开</span><br></pre></td></tr></table></figure>

<p>锚点连接a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#dd1&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;#dd1&quot;&gt; &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3-4-列表"><a href="#3-4-列表" class="headerlink" title="3.4 列表"></a>3.4 列表</h4><h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h5><pre><code>ul里面只能是li，li里面可以添加其他的标签，li里面的内容结构相仿</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        </span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h5><p>type可以更改序列号类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;I&quot;&gt; </span><br><span class="line">        &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;123&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-自定义列表（-definition-list-）标签"><a href="#3-自定义列表（-definition-list-）标签" class="headerlink" title="3.自定义列表（ definition list ）标签"></a>3.自定义列表（ definition list ）标签</h5><pre><code> &lt;dl&gt; &lt;!--对网页内容划分出存放大量结构相似无结构先后顺序区域--&gt;
      &lt;dt&gt;属性一&lt;/dt&gt;&lt;!--列表内容①对主题名称--&gt;
      &lt;dd&gt;属性一的描述&lt;/dd&gt; &lt;!--对该①主题名称的解释--&gt;
      &lt;dd&gt;属性一的描述&lt;/dd&gt; &lt;!--对该①主题名称的解释--&gt;
      &lt;dt&gt;属性二&lt;/dt&gt;    &lt;!--列表内容②对主题名称--&gt;
      &lt;dd&gt;属性二的描述&lt;/dd&gt; &lt;!--对该②主题名称的解释--&gt;
      &lt;dd&gt;属性二的描述&lt;/dd&gt; &lt;!--对该②主题名称的解释--&gt;
&lt;/dl&gt;</code></pre><h3 id="3-块级标签与行内标签"><a href="#3-块级标签与行内标签" class="headerlink" title="3.块级标签与行内标签"></a>3.块级标签与行内标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.块级标签：</span><br><span class="line">        1.占整行；</span><br><span class="line">        2.设置宽高；</span><br><span class="line">        包含其他任意元素（p标签除外）</span><br><span class="line"></span><br><span class="line"> 2.行内标签：</span><br><span class="line">        1.内容多大就占多大；</span><br><span class="line">        2.从左到右依次排布；</span><br><span class="line">        3.不能设置高，高度由内容撑开</span><br><span class="line">        只能包裹行内元素或文字（a除外）</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="二、CSS样式与基本选择器"><a href="#二、CSS样式与基本选择器" class="headerlink" title="二、CSS样式与基本选择器"></a>二、CSS样式与基本选择器</h2><p>层叠样式表（英语：Cascading Style Sheets，简写CSS），是一种用来为HTML文档添加样式（字体、间距、位置、颜色、角度等显示效果）的计算机语言</p>
<p>HTML是内容的展示，CSS是内容的装饰</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS中的代码注释格式采用的是：&#x2F;* 注释文字 *&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="1-样式：行内样式、内联样式、外链样式"><a href="#1-样式：行内样式、内联样式、外链样式" class="headerlink" title="1.样式：行内样式、内联样式、外链样式"></a>1.样式：行内样式、内联样式、外链样式</h3><p>1.1行内样式</p>
<p>在开始标签的内部可以设置一个叫做style的属性，属性的双引号内存放该元素代码的CSS样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 style&#x3D;&quot;color:lightblue;&quot; &gt;   您好 &lt;&#x2F;h1&gt; </span><br><span class="line">  style&#x3D;&quot;存放该元素css样式代码&quot;</span><br></pre></td></tr></table></figure>

<p>1.2内联样式</p>
<p>在head标签中间新建一个style标签，该标签内部存放的就是网页文件中的CSS代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- css应用方式二：内部样式 --&gt;</span><br><span class="line">    &lt;!-- 在头部style标签中书写样式 --&gt;</span><br><span class="line">    &lt;!-- 缺点：</span><br><span class="line">        1.样式多了就不好维护了</span><br><span class="line">        2.复用性不强</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            color:red;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<p>1.3外联样式</p>
<p>外联样式css文件后缀名以.css命名</p>
<p>css的加载顺序是由上至下进行渲染的</p>
<p>在head标签中间新建一个link标签，通过href属性设置外部CSS文件地址。<br>rel是relationship的缩写（指定当前文档与被链接文档的关系）rel=“stylesheet”表示我们引用的是一个样式表（CSS）文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- 3.引用方式三:外部样式 --&gt;</span><br><span class="line">    &lt;!-- 通过link标签链接css文件 --&gt;</span><br><span class="line">    &lt;!-- 检验连接成功?vscode编辑器按住ctrl键去点击css文件名 --&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;index.css&quot;&gt;</span><br><span class="line">    &lt;!-- 强调一点:在项目中使用外部样式,在平常的练习中,内部样式,绝对不能用行内样式 --&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;11111111&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h2&gt;22222222&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-基本选择器"><a href="#2-基本选择器" class="headerlink" title="2.基本选择器"></a>2.基本选择器</h3><h4 id="2-1标签选择器"><a href="#2-1标签选择器" class="headerlink" title="2.1标签选择器"></a>2.1标签选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签选择器</span><br><span class="line">div&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2类名选择器"><a href="#2-2类名选择器" class="headerlink" title="2.2类名选择器"></a>2.2类名选择器</h4><p>以class命名的选择器叫做类名选择器  .符号开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> .box1&#123;</span><br><span class="line">            color: red;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> &lt;div class&#x3D;&quot;box1&quot;&gt;11111&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-3ID选择器-符号开头-页面只可以出现一次"><a href="#2-3ID选择器-符号开头-页面只可以出现一次" class="headerlink" title="2.3ID选择器 #符号开头  页面只可以出现一次"></a>2.3ID选择器 #符号开头  页面只可以出现一次</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> #dachui&#123;</span><br><span class="line">            color:blueviolet;</span><br><span class="line">        &#125; </span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;dachui&quot;&gt;11111&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-4多类名选择器"><a href="#2-4多类名选择器" class="headerlink" title="2.4多类名选择器"></a>2.4多类名选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> div.baobao.box&#123;</span><br><span class="line">            color: pink;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box2 baobao&quot;&gt;11111&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;box2 baobao&quot;&gt;11111&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-5通配符选择器-开头"><a href="#2-5通配符选择器-开头" class="headerlink" title="2.5通配符选择器 *开头"></a>2.5通配符选择器 *开头</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">           color: white !important;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-css基本样式"><a href="#3-css基本样式" class="headerlink" title="3.css基本样式"></a>3.css基本样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            &#x2F;* 宽 *&#x2F;</span><br><span class="line">            &#x2F;* 单位像素 *&#x2F;</span><br><span class="line">            width: 300px;</span><br><span class="line">            &#x2F;* 高*&#x2F;</span><br><span class="line">           height: 300px;</span><br><span class="line">           &#x2F;* 背景颜色 *&#x2F;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            &#x2F;* 元素对外面的距离 *&#x2F;</span><br><span class="line">            &#x2F;* 上边距 *&#x2F;</span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            &#x2F;* 左边距 *&#x2F;</span><br><span class="line">            margin-left: 50px;</span><br><span class="line">            &#x2F;* 下边距 *&#x2F;</span><br><span class="line">            margin-bottom: 50px;</span><br><span class="line">            &#x2F;*  右边距*&#x2F;</span><br><span class="line">            &#x2F;* 右边距是无限延伸的，单独给是显示不出来 *&#x2F;</span><br><span class="line">            margin-right: 1000px;</span><br><span class="line">            &#x2F;* 复合写法 *&#x2F;</span><br><span class="line">            &#x2F;* 一个值：四个方向的距离一样 *&#x2F;</span><br><span class="line">            margin:10px;</span><br><span class="line">            &#x2F;* 两个值：上下 左右 *&#x2F;</span><br><span class="line">            margin: 10px 20px;</span><br><span class="line">            &#x2F;* 三个值：上 左右 下 *&#x2F;</span><br><span class="line">            margin:10px 20px 30px;</span><br><span class="line">            &#x2F;* 四个值： 上 右 下 左 以顺时针的顺序绕一圈 *&#x2F;</span><br><span class="line">            &#x2F;* auto 块元素水平居中 *&#x2F;</span><br><span class="line">            margin:0 auto;</span><br><span class="line">            &#x2F;* 文字大小 *&#x2F;</span><br><span class="line">            &#x2F;* font-size 所有浏览器最小的字体是12px，默认16px *&#x2F;</span><br><span class="line">            font-size: 200px;</span><br><span class="line">            &#x2F;*字体 *&#x2F;</span><br><span class="line">            font-family:&quot;楷体&quot;; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;* 宽高对行内元素不生效 *&#x2F;</span><br><span class="line">        &#x2F;* span&#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height：300px;</span><br><span class="line">        &#125; *&#x2F;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;123&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;P&gt;456&lt;&#x2F;P&gt;</span><br><span class="line">    &lt;span&gt;aaa&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-样式优先级权重规则"><a href="#4-样式优先级权重规则" class="headerlink" title="4.样式优先级权重规则"></a>4.样式优先级权重规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!important 权重最高</span><br><span class="line">行内样式，权重1000</span><br><span class="line">ID选择器，单个权重100</span><br><span class="line">类名选择器，属性选择器，伪类选择器，单个权重10</span><br><span class="line">标签选择器，伪元素选择器，单个权重1</span><br><span class="line">统配符选择器，关系选择器（+，&gt;,~,&quot;&quot;），否定伪类，权重0</span><br></pre></td></tr></table></figure>

<h3 id="5-css颜色（CSS-Colors）"><a href="#5-css颜色（CSS-Colors）" class="headerlink" title="5.css颜色（CSS Colors）"></a>5.css颜色（CSS Colors）</h3><p>CSS的颜色可以通过以下方法指定：</p>
<p>十六进制颜色</p>
<p>十六进制颜色 同一字母的大小写的字母进行编写#ff0000，或#FFF0000</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有主要浏览器都支持十六进制颜色值。</span><br><span class="line"></span><br><span class="line">指定一个十六进制的颜色其组成部分是：＃RRGGBB，其中RR（红色），GG（绿色）和BB（蓝色）。所有值必须介于0和FF之间。</span><br><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">background-color:#ff0000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> RGB颜色</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RGB颜色值在所有主要浏览器都支持。  </span><br><span class="line">RGB颜色值指定：RGB（红，绿，蓝）。每个参数（红色，绿色和蓝色）定义颜色的亮度，可在0和255之间，或一个百分比值（从0％到100％）之间的整数。</span><br><span class="line"></span><br><span class="line">例如RGB（0,0,255）值呈现为蓝色，因为蓝色的参数设置为最高值（255）而其他设置为0。</span><br><span class="line"></span><br><span class="line">此外，下面的值定义相同的颜色：RGB（0,0,255），RGB（0％，0％，100％）。</span><br></pre></td></tr></table></figure>

<p>RGBA颜色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RGBA颜色值是RGB颜色值alpha通道的延伸 - 指定对象的透明度。</span><br><span class="line"></span><br><span class="line">RGBA颜色值指定：RGBA（红，绿，蓝，alpha）。 Alpha参数是一个介于0.0（完全透明）和1.0（完全不透明）之间的参数。</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">background-color:rgba(255,0,0,0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-符合型选择器"><a href="#6-符合型选择器" class="headerlink" title="6.符合型选择器"></a>6.符合型选择器</h3><p><u><strong>选择器最多不能超过3个</strong></u></p>
<h4 id="6-1交集选择器"><a href="#6-1交集选择器" class="headerlink" title="6.1交集选择器"></a>6.1交集选择器</h4><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间<strong><u>不能有空格</u></strong>，如div.dachui。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">div.dachui&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125; </span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line"> &lt;div class&#x3D;&quot;dachui&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;p class&#x3D;&quot;dachui&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-2并集选择器"><a href="#6-2并集选择器" class="headerlink" title="6.2并集选择器"></a>6.2并集选择器</h4><p>并集选择器，用引文符号进行分割,每分割一个进行换行进行书写</p>
<p>并集选择器（CSS选择器分组）是各个选择器通过<strong><u>逗号</u></strong>连接而成的</p>
<p>任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">		div,</span><br><span class="line">        p&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line"> div class&#x3D;&quot;dachui&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;p class&#x3D;&quot;dachui&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-3后代元素选择器"><a href="#6-3后代元素选择器" class="headerlink" title="6.3后代元素选择器"></a>6.3后代元素选择器</h4><p>后代元素选择器是一个空格，<u><strong>空格</strong></u>前后各有一个选择器</p>
<p>作用是：找到<strong><u>空格前的</u></strong>选择器所选中的元素的后代元素中<strong><u>符合空格</u></strong>后选择器的要求的<u><strong>元素</strong></u></p>
<p>后代选择器，用空格隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">		div li&#123;	</span><br><span class="line">		&#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">         &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;aaa&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;bbb&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;ccc&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">         &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;aaa&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;bbb&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;ccc&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-4子代元素选择器"><a href="#6-4子代元素选择器" class="headerlink" title="6.4子代元素选择器"></a>6.4子代元素选择器</h4><p>子代元素选择器是一个<strong><u>大于号</u></strong>，大于号前后各有一个选择器</p>
<p>作用是：找到<strong><u>大于号</u></strong>的选择器所选中的元素的子元素中<u><strong>大于号后</strong></u>选择器的要求的元素</p>
<p>颜色是会从父代元素继承</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> .yeye &gt;div&gt;div&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"> .yeye &gt;div&gt;p&#123;</span><br><span class="line">            color: red;</span><br><span class="line">       		 &#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;yeye&quot;&gt;</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">           123</span><br><span class="line">           &lt;div&gt;456&lt;&#x2F;div&gt;</span><br><span class="line">           &lt;p&gt;1234567&lt;&#x2F;p&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-5相邻元素选择器"><a href="#6-5相邻元素选择器" class="headerlink" title="6.5相邻元素选择器"></a>6.5相邻元素选择器</h4><p>相邻元素选择器是一个<strong><u>+号</u></strong>，作用是：找到<u><strong>加号前</strong></u>的选择器所选中的元素<strong><u>紧跟其后第一</u></strong>个符合+号后选择器选中的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	&#x2F;*选择器最多不能超过3个*&#x2F;</span><br><span class="line">	.ll01+li&#123;</span><br><span class="line"> 	  background-color:red;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	.ll01+li&#123;</span><br><span class="line"> 	  background-color:pink;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	.ll01+li+li&#123;</span><br><span class="line"> 	  background-color:pink;</span><br><span class="line"> 	&#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;ll01&quot; &gt;0001&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0002&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0003&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0004&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0005&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-5兄弟元素选择器"><a href="#6-5兄弟元素选择器" class="headerlink" title="6.5兄弟元素选择器"></a>6.5兄弟元素选择器</h4><p>兄弟元素选择器是一个<strong><u>~号</u></strong>，作用是：找到<del><u><strong>号前的</strong></u>选择器所选中的元素<u><strong>紧跟其后所有</strong></u>符合</del>号后的选择器选中的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	&#x2F;*选择器最多不能超过3个*&#x2F;</span><br><span class="line">	.ll01~li&#123;</span><br><span class="line"> 	  background-color:red;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li &gt;0001&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0002&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;ll01&quot;&gt;0003&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0004&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;0005&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>


<h2 id="三、CSS盒模型概念及企业的应用"><a href="#三、CSS盒模型概念及企业的应用" class="headerlink" title="三、CSS盒模型概念及企业的应用"></a>三、CSS盒模型概念及企业的应用</h2><h3 id="1-内边距padding"><a href="#1-内边距padding" class="headerlink" title="1.内边距padding"></a>1.内边距padding</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内边距padding 会增加中心盒子的内边距</span><br><span class="line"></span><br><span class="line">内边距的复合写法 padding:10PX 20PX 30PX 40PX</span><br></pre></td></tr></table></figure>

<h3 id="2-边框border"><a href="#2-边框border" class="headerlink" title="2.边框border"></a>2.边框border</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">边框的样式</span><br><span class="line">边框：粗细 样式  颜色</span><br><span class="line">border:10px solid  red；</span><br><span class="line">样式</span><br><span class="line"></span><br><span class="line">样式：直线solid  虚线dashed   点线dotted  双实线double 立体groove  hidden隐藏 向内inset none无边框线</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">单独写法</span><br><span class="line">根据方向分开写</span><br><span class="line">border-top:10px solid red;</span><br><span class="line">border-right:10px solid green;</span><br><span class="line">border-bottom:10px solid yellow;</span><br><span class="line">border-left:10px solid blue;</span><br><span class="line"></span><br><span class="line">根据属性分开写</span><br><span class="line">border-whith:</span><br><span class="line">border-style:</span><br><span class="line">border-color:</span><br><span class="line"></span><br><span class="line">最分解的写法</span><br><span class="line">border-top-width:</span><br></pre></td></tr></table></figure>

<h3 id="3-外边距margin"><a href="#3-外边距margin" class="headerlink" title="3.外边距margin"></a>3.外边距margin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外边距的复合写法margin:10PX 20PX 30PX 40PX</span><br><span class="line">margin:0 auto;&#x2F;*需要给盒子的宽度*&#x2F;</span><br><span class="line">盒子居中</span><br><span class="line">分开的写法</span><br><span class="line">margin-top:</span><br><span class="line">margin-right:</span><br><span class="line">margin-bottom:</span><br><span class="line">margin-left:</span><br></pre></td></tr></table></figure>



<h3 id="4-透明色transparent"><a href="#4-透明色transparent" class="headerlink" title="4.透明色transparent"></a>4.透明色transparent</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color：transparent</span><br></pre></td></tr></table></figure>

<h3 id="2-1标准盒模型"><a href="#2-1标准盒模型" class="headerlink" title="2.1标准盒模型"></a>2.1标准盒模型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.one&#123;</span><br><span class="line">			width: 300px;</span><br><span class="line">			height: 300px;</span><br><span class="line">			background-color: aqua;</span><br><span class="line">			border: 50px solid red;</span><br><span class="line">			padding: 50px;</span><br><span class="line">			&#x2F;*标准盒模型:</span><br><span class="line">			此时这个盒子是500px的宽高总面积</span><br><span class="line">			总宽度  &#x3D;  宽度 + 左右border + 左右padding</span><br><span class="line">			此时内容区的面积仍然是300px</span><br><span class="line">			高度同理 *&#x2F;</span><br><span class="line">		&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">	&lt;div class&#x3D;&quot;one&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2怪异盒模型（又简称IE盒模型）"><a href="#2-2怪异盒模型（又简称IE盒模型）" class="headerlink" title="2.2怪异盒模型（又简称IE盒模型）"></a>2.2怪异盒模型（又简称IE盒模型）</h3><pre><code>**box-sizing: border-box;怪异属性：盒子尺寸**

**box-sizing: content-box;怪异属性：标准盒模型默认值**</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.two&#123;</span><br><span class="line">			box-sizing: border-box;&#x2F;*怪异属性：盒子尺寸*&#x2F;</span><br><span class="line">			&#x2F;* 开启怪异盒模型 *&#x2F;</span><br><span class="line">			width: 300px;</span><br><span class="line">			height: 300px;</span><br><span class="line">			background-color: aqua;</span><br><span class="line">			border: 50px solid red;</span><br><span class="line">			padding: 50px;</span><br><span class="line">			&#x2F;* 怪异盒模型:</span><br><span class="line">			此时这个盒子仍然是300px总面积  不会外面加只是往里面挤</span><br><span class="line">			此时内容区的宽度 &#x3D; 300px - 左右border100px - 左右padding100px &#x3D; 100px</span><br><span class="line">			高度同理</span><br><span class="line">			你写的内容只能显示在这100px的内容区里面</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	&lt;div class&#x3D;&quot;two&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3父子元素外边距合并"><a href="#3-3父子元素外边距合并" class="headerlink" title="3.3父子元素外边距合并"></a>3.3父子元素外边距合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            &#x2F;* border-top: 1px solid transparent;使用边框线档回 *&#x2F;</span><br><span class="line">            padding-top: 100px;&#x2F; *使用padding加上边距档回 *&#x2F;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4兄弟元素外边距合并"><a href="#3-4兄弟元素外边距合并" class="headerlink" title="3.4兄弟元素外边距合并"></a>3.4兄弟元素外边距合并</h3><p>兄弟直接避免出现向下外边距的距离，要么统一使用上边距或统一使用下边距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; *兄弟元素外边距溢出*&#x2F;</span><br><span class="line">&#x2F; *兄弟元素外边距他会最大的px值进行计算;*&#x2F;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        .big &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">     		 margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .small &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">    	margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;big&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;small&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="四、css行内盒模型及文字样式详解"><a href="#四、css行内盒模型及文字样式详解" class="headerlink" title="四、css行内盒模型及文字样式详解"></a>四、css行内盒模型及文字样式详解</h2><h3 id="1-行内盒模型（inline-box-moldel）"><a href="#1-行内盒模型（inline-box-moldel）" class="headerlink" title="1.行内盒模型（inline box moldel）"></a>1.行内盒模型（inline box moldel）</h3><p>行内盒模型的内容区font-size（文字大小样式）决定的大小</p>
<p>行内盒模型特性</p>
<p>行内盒模型padding的特性：左右生效，上下不生效</p>
<p>行内盒模型margin的特性：左右生效，上下不生效 auto无效</p>
<p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200405164538268.png"  alt="image-20200405164538268"></p>
<h4 id="1-1文字大小的值常用有两类："><a href="#1-1文字大小的值常用有两类：" class="headerlink" title="1.1文字大小的值常用有两类："></a>1.1文字大小的值常用有两类：</h4><p>① px<br>② em（例：1.5em、2em，含义为该文字的大小是父元素文字大小的1.5倍，2倍）</p>
<p>1em和当前字体大小相等。在浏览器中默认的文字大小是16px。</p>
<p>因此，1em的默认大小是16px。可以通过下面这个公式将像素转换为em：<strong>px/16=em</strong></p>
<p><img src="/" class="lazyload" data-src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200405163859626.png"  alt="image-20200405163859626"></p>
<style>
    body{
       font-size:20px;
 }
    p{
        font-size:1.5em;/*实际大小为20*1.5=30px*/
    }
</style>


<h4 id="1-2行内盒模型字体的基线-baseline-）"><a href="#1-2行内盒模型字体的基线-baseline-）" class="headerlink" title="1.2行内盒模型字体的基线 (baseline ）"></a>1.2行内盒模型字体的基线 (baseline ）</h4><p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200405164611250.png"  alt="image-20200405164611250"></p>
<h4 id="1-3自定义字体"><a href="#1-3自定义字体" class="headerlink" title="1.3自定义字体"></a>1.3自定义字体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       @font-face &#123;</span><br><span class="line">           &#x2F;* 你起的该字体的名字 *&#x2F;</span><br><span class="line">           font-family: &quot; font&quot;;</span><br><span class="line">           src: url(&quot;font&#x2F; font.ttf&quot;); &#x2F;* 字体名称文件.ttf *&#x2F;</span><br><span class="line">       &#125;</span><br><span class="line">       a &#123;</span><br><span class="line">           font-family: &quot; font&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-4字体的属性"><a href="#1-4字体的属性" class="headerlink" title="1.4字体的属性"></a>1.4字体的属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line-height 行高 文本垂直居中</span><br><span class="line">     line-height: 50px</span><br><span class="line">font-weight: 100;  bloder;调整文字粗细 数值 关键字控制  没有px值</span><br><span class="line">text-align: justify;</span><br><span class="line">             &#x2F;* 文本对齐：text-align *&#x2F;</span><br><span class="line">             &#x2F;* center：居中 *&#x2F;</span><br><span class="line">             &#x2F;* left：左对齐 *&#x2F;</span><br><span class="line">             &#x2F;* right：右对齐 *&#x2F;</span><br><span class="line">             &#x2F;* justify：两端对齐 *&#x2F;</span><br><span class="line">             text-align: justify;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">             &#x2F;* 文本缩进 *&#x2F;</span><br><span class="line">	text-decoration: line-through;</span><br><span class="line">             &#x2F;* 文本装饰 *&#x2F;</span><br><span class="line">             &#x2F;* overline：上划线 *&#x2F;</span><br><span class="line">             &#x2F;* underline：下划线 *&#x2F;</span><br><span class="line">             &#x2F;* line-through：删除线 *&#x2F;</span><br><span class="line">            </span><br><span class="line">	vertical-align垂直对齐</span><br><span class="line">	 &#x2F;* 默认值：baseline（文本基线） *&#x2F;</span><br><span class="line">            &#x2F;* top：顶线对齐 *&#x2F;</span><br><span class="line">            &#x2F;* middle：中线对齐 *&#x2F;</span><br><span class="line">            &#x2F;* bottom：底线对齐 *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        img &#123;</span><br><span class="line">            vertical-align: bottom;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、默认显示类型及显示类型转换"><a href="#五、默认显示类型及显示类型转换" class="headerlink" title="五、默认显示类型及显示类型转换"></a>五、默认显示类型及显示类型转换</h2><h3 id="1-1块级元素默认显示类型"><a href="#1-1块级元素默认显示类型" class="headerlink" title="1.1块级元素默认显示类型"></a>1.1块级元素默认显示类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:block</span><br></pre></td></tr></table></figure>

<h3 id="1-2行内元素默认显示类型"><a href="#1-2行内元素默认显示类型" class="headerlink" title="1.2行内元素默认显示类型"></a>1.2行内元素默认显示类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline</span><br></pre></td></tr></table></figure>

<h3 id="1-3行块元素默认显示类型"><a href="#1-3行块元素默认显示类型" class="headerlink" title="1.3行块元素默认显示类型"></a>1.3行块元素默认显示类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline-block</span><br><span class="line">解析空格: 	</span><br><span class="line">	形成原因：行内元素之间会解析空格回车，形成间距。</span><br><span class="line"></span><br><span class="line">可以让块级元素同行显示，使用字体有解析空格，由enter造成的</span><br><span class="line">1. 给行内块元素父级设置字体大小为零，行内块元素字体大小重新设置</span><br><span class="line">2. 删除标签之间空格</span><br><span class="line">3. 从根本解决问题（不要使用）</span><br><span class="line">学了浮动与定位后不在使用行块元素</span><br><span class="line">vertical-align:top     顶线对齐可以解决页面塌陷问题</span><br></pre></td></tr></table></figure>

<h3 id="2-元素的显示与隐藏-display：none-or-display-block"><a href="#2-元素的显示与隐藏-display：none-or-display-block" class="headerlink" title="2.元素的显示与隐藏 display：none or display: block"></a>2.元素的显示与隐藏 display：none or display: block</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display: block有显示的意义，和display: none;隐藏不显示</span><br><span class="line">	特点：</span><br><span class="line">	1. 不占据空间（如同消失一般），无法点击交互</span><br><span class="line">	2. 内部子元素也不会显示</span><br><span class="line">	3. display为none的元素浏览器不会渲染</span><br></pre></td></tr></table></figure>

<h3 id="3-三种显示类型特征"><a href="#3-三种显示类型特征" class="headerlink" title="3.三种显示类型特征"></a>3.三种显示类型特征</h3><h4 id="3-1块级元素特性："><a href="#3-1块级元素特性：" class="headerlink" title="3.1块级元素特性："></a>3.1块级元素特性：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">块级元素特性：</span><br><span class="line">block: (div&#x2F;p&#x2F;dl&#x2F;form&#x2F;h1-h6&#x2F;ol&#x2F;ul)</span><br><span class="line">1. 独占一行</span><br><span class="line">2. 高度由里面的元素撑开</span><br><span class="line">3. 宽度默认100%(继承父元素宽度)</span><br><span class="line">4. 可以设置外边距&#x2F;内边距</span><br><span class="line">5. 可以包裹其他任意元素</span><br><span class="line">6. p标签不可包裹块级元素(只存放文本)</span><br></pre></td></tr></table></figure>

<h4 id="3-2行内元素特性："><a href="#3-2行内元素特性：" class="headerlink" title="3.2行内元素特性："></a>3.2行内元素特性：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行内元素特性：</span><br><span class="line">inline: (a&#x2F;b&#x2F;em&#x2F;i&#x2F;img&#x2F;span)</span><br><span class="line">1. 和其他行内元素处于同一行</span><br><span class="line">2. 不支持宽高</span><br><span class="line">3. 上下外边距无效，auto无效(不支持auto居中)</span><br><span class="line">4. 内边距只对内联元素产生影响，无视块元素</span><br><span class="line">5. 标签之间的空格解析</span><br><span class="line">6. a标签能包裹块级元素(特殊、区域链接)</span><br></pre></td></tr></table></figure>

<h4 id="3-3行内块元素特性-集合两种盒模型的特征-："><a href="#3-3行内块元素特性-集合两种盒模型的特征-：" class="headerlink" title="3.3行内块元素特性(集合两种盒模型的特征)："></a>3.3行内块元素特性(集合两种盒模型的特征)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行内块元素特性(集合两种盒模型的特征)：</span><br><span class="line">inline-block: (input)</span><br><span class="line">1. 本质上是行内元素，具有行内元素的性质</span><br><span class="line">2. 支持宽高</span><br><span class="line">3. 上下外边距有效,auto无效(不支持auto居中)</span><br><span class="line">4. 内边距只对内联元素产生影响，无视块元素</span><br><span class="line">5. 标签之间的空格解析</span><br><span class="line">6. img标签不是行内块元素(是行内元素,但是可以设置宽高，这源自于历史…)</span><br></pre></td></tr></table></figure>

<h3 id="4-opacity调整元素透明度0-1"><a href="#4-opacity调整元素透明度0-1" class="headerlink" title="4.opacity调整元素透明度0-1"></a>4.opacity调整元素透明度0-1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opacity:0.5；调整元素透明度0-1,调整的是整个元素的透明度</span><br></pre></td></tr></table></figure>

<h2 id="六、背景样式详解"><a href="#六、背景样式详解" class="headerlink" title="六、背景样式详解"></a>六、背景样式详解</h2><h3 id="1-1背景单例型样式之背景颜色（background-color）"><a href="#1-1背景单例型样式之背景颜色（background-color）" class="headerlink" title="1.1背景单例型样式之背景颜色（background-color）"></a>1.1背景单例型样式之背景颜色（background-color）</h3><p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410174329514.png"  alt="image-20200410174329514"></p>
<h3 id="1-2背景单例型样式之显示基点（background-origin）"><a href="#1-2背景单例型样式之显示基点（background-origin）" class="headerlink" title="1.2背景单例型样式之显示基点（background-origin）"></a>1.2背景单例型样式之显示基点（background-origin）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">背景图片显示基点：左上角原点位置 默认是padding-box</span><br><span class="line">默认是padding-box</span><br><span class="line">content-box 中心基点</span><br><span class="line">border-box 边框基点</span><br></pre></td></tr></table></figure>

<h3 id="1-3背景样式定位（background-position）"><a href="#1-3背景样式定位（background-position）" class="headerlink" title="1.3背景样式定位（background-position）"></a>1.3背景样式定位（background-position）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">背景图片定位（background-position）</span><br><span class="line">默认是通过图片左上角的负值进行定位</span><br></pre></td></tr></table></figure>



<h3 id="1-4背景单例型样式之背景图片（background-image）"><a href="#1-4背景单例型样式之背景图片（background-image）" class="headerlink" title="1.4背景单例型样式之背景图片（background-image）"></a>1.4背景单例型样式之背景图片（background-image）</h3><p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410174402964.png"  alt="image-20200410174402964"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ackground-image:  初始值为none</span><br><span class="line">background-image：url(“图片地址”); </span><br><span class="line"></span><br><span class="line">常用背景图片格式：</span><br><span class="line">	.jpg     不支持动画，不支持透明，渐进显示，颜色丰富，有损</span><br><span class="line">	.png    不支持动画，支持透明度，颜色更丰富，无损</span><br><span class="line">	.gif      支持动画，256种颜色，2种透明度，渐进显示</span><br><span class="line">	.webp 支持动画，高压缩率，高加载速率</span><br></pre></td></tr></table></figure>

<h3 id="1-5背景单例型样式之背景大小（background-size）"><a href="#1-5背景单例型样式之背景大小（background-size）" class="headerlink" title="1.5背景单例型样式之背景大小（background-size）"></a>1.5背景单例型样式之背景大小（background-size）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-repeat: no-repeat;</span><br><span class="line">       </span><br><span class="line">           &#x2F;* 5.背景图片尺寸 *&#x2F;</span><br><span class="line">           &#x2F;* 设置宽或高，另一个值auto，等比例缩放 *&#x2F;</span><br><span class="line">           background-size: cover;</span><br></pre></td></tr></table></figure>

<h3 id="1-6背景单例型样式之背景图片裁剪区域（background-clip）"><a href="#1-6背景单例型样式之背景图片裁剪区域（background-clip）" class="headerlink" title="1.6背景单例型样式之背景图片裁剪区域（background-clip）"></a>1.6背景单例型样式之背景图片裁剪区域（background-clip）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding-box:</span><br><span class="line">显示内容区和内边距部分的背景图片</span><br><span class="line">padding-box:</span><br><span class="line">显示内容区和内边距部分的背景图片</span><br><span class="line">border-box:</span><br><span class="line">显示内容区、内边距和边框部分的图片</span><br></pre></td></tr></table></figure>

<h3 id="1-7背景单例型样式之背景图片关联依附（-background-attachment-）"><a href="#1-7背景单例型样式之背景图片关联依附（-background-attachment-）" class="headerlink" title="1.7背景单例型样式之背景图片关联依附（ background-attachment ）"></a>1.7背景单例型样式之背景图片关联依附（ background-attachment ）</h3><p>背景图片关联依附（background-attachment ）样式的作用就是，决定背景是在视口中固定的还是随包含它的区块滚动的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fixed：</span><br><span class="line">	此关键字表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</span><br><span class="line">local：</span><br><span class="line">    此关键字表示背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动， 并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。</span><br><span class="line">	</span><br><span class="line">scroll：</span><br><span class="line">	此关键字表示背景相对于元素本身固定， 而不是随着它的内容滚动（对元素边框是有效的）。</span><br></pre></td></tr></table></figure>

<h3 id="1-8背景复合型样式写法"><a href="#1-8背景复合型样式写法" class="headerlink" title="1.8背景复合型样式写法"></a>1.8背景复合型样式写法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">背景是复合属性: </span><br><span class="line">	background: color image repeat attachment position&#x2F;size；</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">	background: red url(images&#x2F;1.png) no-repeat scroll 20px 20px&#x2F;30px 30px；</span><br><span class="line">	省略部分会被默认值替代,</span><br><span class="line">	position和size之间要用&#x2F;分割</span><br></pre></td></tr></table></figure>

<h3 id="1-9多重背景设置"><a href="#1-9多重背景设置" class="headerlink" title="1.9多重背景设置"></a>1.9多重背景设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单个元素可设置多个背景图片</span><br><span class="line">background:  url(images&#x2F;1.png) no-repeat scroll 20px 20px&#x2F;30px 30px</span><br><span class="line">, url(images&#x2F;1.png) no-repeat scroll 20px 20px&#x2F;30px 30px  red；在写多重背景颜色要写在最后面</span><br></pre></td></tr></table></figure>

<h3 id="2、overflow样式"><a href="#2、overflow样式" class="headerlink" title="2、overflow样式"></a>2、overflow样式</h3><p>overflow样式的作用就是，一个元素的内容太大而超出元素边缘时，浏览器对超出部分的内容如何处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow：visible;（默认）</span><br><span class="line">超出内容正常显示</span><br><span class="line">overflow：hidden;</span><br><span class="line">超出内容隐藏</span><br><span class="line">overflow：scroll;</span><br><span class="line">如果内容比较多，则用滚动条的形式展示多余内容</span><br><span class="line">overflow：auto;</span><br><span class="line">内容未超出，正常显示</span><br><span class="line">内容超出，显示滚动条</span><br></pre></td></tr></table></figure>

<h2 id="七、圆角样式与渐变色详解"><a href="#七、圆角样式与渐变色详解" class="headerlink" title="七、圆角样式与渐变色详解"></a>七、圆角样式与渐变色详解</h2><h3 id="圆角样式border-radius基本原理"><a href="#圆角样式border-radius基本原理" class="headerlink" title="圆角样式border-radius基本原理"></a>圆角样式border-radius基本原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius</span><br><span class="line">圆角样式如同margin一样，可以单独对每个边角的小圆设置一个不一样的半径值，这样我们就可以利用圆角样式设计出各式各样的图形出来</span><br><span class="line"></span><br><span class="line">四个属性值</span><br><span class="line">Border-radius：50px 30px 80px 150px; 两个属性值：左上 右上 右下 左下</span><br><span class="line">圆角样式border-radius的单例型写法</span><br><span class="line">border-top-left-radius:50px;</span><br><span class="line">&#x2F;*左上角小圆半径*&#x2F; </span><br><span class="line"></span><br><span class="line">border-top-right-radius:30px; </span><br><span class="line">&#x2F;*右上角小圆半径*&#x2F; </span><br><span class="line"></span><br><span class="line">border-bottom-right-radius:80px; </span><br><span class="line">&#x2F;*右下角小圆半径*&#x2F; </span><br><span class="line"></span><br><span class="line">border-bottom-left-radius:150px;</span><br><span class="line"> &#x2F;*左下角小圆半径*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="圆角样式border-radius的椭圆设计"><a href="#圆角样式border-radius的椭圆设计" class="headerlink" title="圆角样式border-radius的椭圆设计"></a>圆角样式border-radius的椭圆设计</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius的属性值可分为两段，由一个反斜杠隔开 反斜杠前面的值为横轴值，反斜杠后的为纵轴值，椭圆的写法与圆角类似，反斜杠前后皆为独立的，语法和简写都一样。</span><br><span class="line">圆角样式border-radius的注意点1</span><br><span class="line">哪个位置的小圆角，浏览器只会隐藏矩形区域在哪个位置圆弧外的部分</span><br><span class="line">border-top-left-radius:200px;&#x2F;*左上角小圆半径*&#x2F; </span><br><span class="line">圆角样式border-radius的注意点2</span><br><span class="line">矩形的宽高为200px*200px，</span><br><span class="line">border-top-left-radius:200px;&#x2F;*左上角小圆半径*&#x2F; </span><br><span class="line">此时显示的效果如上图</span><br><span class="line">那么如果圆角半径大于200px呢？</span><br><span class="line">圆角半径&lt;&#x3D;元素宽度</span><br><span class="line">圆角样式border-radius的注意点3</span><br><span class="line"></span><br><span class="line">border-radius 这个属性还有另外一个鲜为人知的真相，它不仅可以接受长度值，还可以接受百分比值。这个百分比值会基于元素的尺寸进行解析，即宽度用于水平半径的解析，而高度用于垂直半径的解析。这意味着相同的百分比可能会计算出不同的水平和垂直半径</span><br><span class="line">width:1000px;</span><br><span class="line">height:500px;</span><br><span class="line">border-radius:50% 50%;&#x2F;*横轴半径为50%，纵轴半径为50%*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>什么是渐变色</p>
<p>渐变区域一直是装饰前端页面的重要饰品，在CSS3的渐变色属性出来之前这一效果只能借助设计师的图片来进行装饰，这样会平白给页面增加了一些http请求次数并增大了页面体积，最终导致延长页面的加载时间。而渐变色属性的出现则很大程度上解决了该问题，</p>
<p>渐变色的定义：所谓渐变色，一般是指在两个及以上的颜色之间呈现一种平滑的过渡效果，该效果是矢量效果，不会因为页面的放大而出现模糊的情况，CSS3中定义了两种渐变类型，一种为线性渐变，一种为径向渐变，还有一种目前应用不广但是很有前途的角向渐变</p>
<p>线性渐变色</p>
<p>其实我们完全可以把给元素设置颜色理解为给一堵墙刷一个油漆，这个油漆怎么刷完全是由户主自己决定的，我们传统的方法要么是给墙刷一个颜色的油漆，要么是给墙上贴一张海报（background-image），而渐变色则是给墙上刷多种颜色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">width:30px;</span><br><span class="line">&#125;</span><br><span class="line">linear-gradient(#abcdef 0%, #b078b4 100%)</span><br></pre></td></tr></table></figure>

<p>   background-image:linear-gradient(背景图片层，不是颜色层</p>
<p>repeating重复渐变色</p>
<h3 id="线性渐变色方向线性渐变（Linear-Gradients）-向下-向上-向左-向右-对角方向"><a href="#线性渐变色方向线性渐变（Linear-Gradients）-向下-向上-向左-向右-对角方向" class="headerlink" title="线性渐变色方向线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向"></a>线性渐变色方向<strong>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</strong></h3><p>我们还可以在颜色前面加上方向控制，渐变色默认给咱们加的是从上往下：linear-gradient(to bottom，red 0%,blue 100%)，我们可以通过对to后面的方向进行自定义可实现不同的效果，如：</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-image: linear-gradient(direction, color-stop1, color-stop2, ...);</span><br></pre></td></tr></table></figure>



<p><strong>线性渐变 - 从上到下（默认情况下）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    height:300px;</span><br><span class="line">    width:300px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    background-image:linear-gradient(red , yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线性渐变 - 从左到右</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    height:300px;</span><br><span class="line">    width:300px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    background-image:linear-gradient(to right, red , yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线性渐变 - 对角</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    height:300px;</span><br><span class="line">    width:300px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    background-image:linear-gradient(to bottom right, red , yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用角度"><a href="#使用角度" class="headerlink" title="使用角度"></a>使用角度</h2><p>如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-image: linear-gradient(angle, color-stop1, color-stop2);</span><br></pre></td></tr></table></figure>

<p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p>
<p><img src="/" class="lazyload" data-src="https://www.runoob.com/wp-content/uploads/2014/07/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg"  alt="img"></p>
<p>但是，请注意很多浏览器（Chrome、Safari、firefox等）的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 <strong>90 - x = y</strong> 其中 x 为标准角度，y为非标准角度。</p>
<p>下面的实例演示了如何在线性渐变上使用角度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">			height:300px;</span><br><span class="line">			width:300px;</span><br><span class="line">			margin:0 auto;</span><br><span class="line">			background-image:linear-gradient(30deg, red, yellow);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从左上到右下</span><br><span class="line">linear-gradient(to bottom right, #abcdef, #b078b4)</span><br><span class="line">左上紫右下蓝 </span><br><span class="line">角度值方向</span><br><span class="line">linear-gradient(0deg, purple 50%, blue 50%）</span><br><span class="line">下紫上蓝</span><br></pre></td></tr></table></figure>

<h3 id="径向渐变色"><a href="#径向渐变色" class="headerlink" title="径向渐变色"></a>径向渐变色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">径向渐变和线性渐变的唯一不同就是添加颜色的方向，径向渐变类似画同心圆，一层层的往外面画圈圈。</span><br><span class="line">一开始选中的油漆颜色</span><br><span class="line">从0%，最开始的位置刷紫色油漆</span><br><span class="line">最后选中的油漆颜色</span><br><span class="line">到100%，最后的位置刷蓝色油漆</span><br></pre></td></tr></table></figure>

<h3 id="渐变色重要关注点1"><a href="#渐变色重要关注点1" class="headerlink" title="渐变色重要关注点1"></a>渐变色重要关注点1</h3><p>渐变色用于背景时，是以背景图片的形式展示的！！！！！！<br>所以可以使用背景图片的所有样式特性，如大小，位置，基点，剪切等</p>
<p>重复渐变色和渐变色重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repeating-linear-gradient() 和 repeating-radial-gradient()。</span><br><span class="line">它们的工作方式跟前两者类似，只有一点不同：色标是无限循环重复的，直到填满整个背景。</span><br></pre></td></tr></table></figure>

<h2 id="八、浮动样式详解"><a href="#八、浮动样式详解" class="headerlink" title="八、浮动样式详解"></a>八、浮动样式详解</h2><p>auto只对标准文档流的块级元素生效</p>
<p>左浮动left</p>
<p>右浮动right</p>
<p>设置了浮动样式的元素不再遵守普通流规则，因此两个浮动的元素可以在同一行显示设置了，浮动样式的元素不再遵守普通流规则，因此两个浮动的元素可以在同一行显示，当父元素的宽度不足以放下所有的浮动元素时，那么超出父元素边界的元素会自动换行显示</p>
<p>浮动样式重点</p>
<p>浮动元素之间不彼此覆盖，具有文本环绕的特性，一个行内元素会    首先按照文本环绕的效果    进行排列</p>
<p>行间距=(line-height  –  font-size)</p>
<p>当父元素没有固定高度时，父元素高度由子元素高度之和撑开</p>
<p>当父元素没有固定高度并且所有的元素都浮起来时，父元素高度塌陷    </p>
<h2 id="父元素高度塌陷"><a href="#父元素高度塌陷" class="headerlink" title="父元素高度塌陷"></a>父元素高度塌陷</h2><p>BFC(块级格式化上下文)</p>
<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。</p>
<p>display 属性为 block, list-item, table 的元素，会产生BFC.给这些元素添加如下属性就可以触发BFC。</p>
<h3 id="BFC的主要用途"><a href="#BFC的主要用途" class="headerlink" title="BFC的主要用途"></a>BFC的主要用途</h3><p>BFC能用来做什么？</p>
<p>(1) 清除元素内部浮动</p>
<p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p>
<p>(2) 解决外边距合并问题</p>
<p>外边距合并的问题。</p>
<p>主要用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</span><br></pre></td></tr></table></figure>

<p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p>
<p>(3) 制作右侧自适应的盒子问题</p>
<p>主要用到</p>
<blockquote>
<p>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</pre></p>
</blockquote>
<p>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</p>
<p>第二类：利用一个幽灵元素来清除浮动，手动撑开父元素的高度<br>方法有：<br>新建一个空的块元素，并给他设置clear：both属性 （缺陷：破坏页面的文档结构）<br>使用伪元素生成一个幽灵元素，并给他设置clear：both属性</p>
<p>第三类Clear：清除浮动（元素盒子的边不能和前面的盒子相邻）<br>            left; 左侧抵抗浮动<br>            right; 右侧抵抗浮动<br>            both; 两边都抵抗浮动(上面两个合并)</p>
<p>第四类：定位父级元素position:absolute;</p>
<h2 id="九、定位样式详解"><a href="#九、定位样式详解" class="headerlink" title="九、定位样式详解"></a>九、定位样式详解</h2><p>position:absolute  定位样式绝对定位 绝对的是浏览器 </p>
<p>position:  relative  定位样式相对定位 相对的父级定位相对初始位置的位置进行定位</p>
<h3 id="1-浏览器水平垂直居中"><a href="#1-浏览器水平垂直居中" class="headerlink" title="1.浏览器水平垂直居中"></a>1.浏览器水平垂直居中</h3><p>top:1px  top值调整位置，不会影响到其他元素</p>
<p>left :1px  left值调整左边距离，不会影响到其他元素</p>
<p>right bottom右下是根据当前窗口进行定位，无边界</p>
<p>脱离标准文档流，不会像浮动一样浮起</p>
<h3 id="2-垂直水平居中"><a href="#2-垂直水平居中" class="headerlink" title="2.垂直水平居中"></a>2.垂直水平居中</h3><p>相对父级的一半然后给负值一半的距离调整为居中位置</p>
<p>绝对定位：完全脱离标准文档流，找到最近的父元素，并相对浏览器窗口定位</p>
<p>相对定位：相对初始位置的位置进行定位</p>
<p><strong>定位中的特殊现象：父相子绝</strong></p>
<p><u>给父一个相对定位，给子一个绝对定位</u>，孙子可以继续绝对定位</p>
<p>相对定位margin：auto生效，绝对定位margin：auto不生效</p>
<p>定位的元素有层级的问题：</p>
<p>只有定位了的元素才有层级之分</p>
<p>通过z-index:1改变层级 ，默认为0，数值大就在最上面后来者居上</p>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>垂直水平居中二</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">垂直水平居中二</span><br><span class="line"></span><br><span class="line">left：50%;</span><br><span class="line"></span><br><span class="line">margin-left:-50px;</span><br><span class="line"></span><br><span class="line">top:50%;</span><br><span class="line"></span><br><span class="line">margin-top:-150px;</span><br></pre></td></tr></table></figure>

<p>伪类选择器hover</p>
<p>鼠标移动到一个元素所改变的效果</p>
<p>元素（选择器）后面跟着hover改变自身的效果</p>
<p>可以改变相邻元素的样式也可以改变子级的样式或者后代的样式，不能改变长辈的样式，只要选择器可以找到就可以改变样式</p>
<h2 id="十、表单元素详解"><a href="#十、表单元素详解" class="headerlink" title="十、表单元素详解"></a>十、表单元素详解</h2><p>form标签：浏览器在网页上专门用来划分出一个用来存储表单元素的区域</p>
<p>action属性内部是一个链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form  action&#x3D;“https:&#x2F;&#x2F;WWW.baidu.com”&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;”请输入用户名“&gt;占位符提示符</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; &gt;密码框</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>占位符提示符：placeholder=“”</p>
<p>文本框是行内元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;password&quot; &gt;密码输入框</span><br></pre></td></tr></table></figure>

<p>value输入框内默认内容</p>
<p>maxlength 输入内容最大长度</p>
<p>minlength 输入内容最小长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;number&quot; min&#x3D;&quot;0&quot; max&#x3D;&quot;10000&quot;   step&#x3D;“10</span><br><span class="line"></span><br><span class="line"> type&#x3D;&quot;number&quot;数字输入框</span><br><span class="line"> min：最小值</span><br><span class="line"> max：最小值</span><br><span class="line"> step：步长</span><br><span class="line"> value输入框内默认内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;range&quot; &gt;数字输入滑块</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;date&quot; &gt;日期输入框</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;time&quot; &gt;时间输入框</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;month&quot;&gt;年月</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;week&quot;&gt;星期</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;datetime-local&quot;&gt;时间戳</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;color&quot;&gt;颜色</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; &gt;单个文件选择</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; multiple</span><br><span class="line"> &gt;文件多选</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;“按钮“&gt;button按钮</span><br><span class="line">value&#x3D;“按钮中显示的文字”</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;submit&quot; value&#x3D;“按钮“&gt;submit提交按钮 默认value是提交</span><br><span class="line">value&#x3D;“按钮中显示的文字”</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">method&#x3D;”post“ form表单的提交方式</span><br><span class="line">get：提交不安全 信息暴露在地址栏上</span><br><span class="line">post：安全性高</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;text&quot; name&#x3D;”username“ &gt; 提交的信息呈键值对的形式：键（name的名字）值（用户输入的信息）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;radio&quot; name&#x3D;“表单元素的名称”  value&#x3D;“该按钮选项给服务器传输的数据值”</span><br><span class="line">&gt; radio单选  name名相同才能联动</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inpu type&#x3D;&quot;checkbox&quot; name&#x3D;“表单元素的名称”  value&#x3D;“该按钮选项给服务器传输的数据值”</span><br><span class="line">&gt; checkbox&quot;多选  name名相同才能联动   value提交时格式name&#x3D;value值</span><br></pre></td></tr></table></figure>

<p>checked ：选中状态</p>
<p>label元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;radio name&#x3D;“sex”&gt;男</span><br><span class="line">&lt;input type&#x3D;&quot;radio name&#x3D;“sex”&gt;女</span><br></pre></td></tr></table></figure>

<p>扩大用户选中input元素的区域，for属性的存储的对应input元素的id名称</p>
<p>button元素（专职按钮元素）双标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;&lt;button&#x2F;&gt;</span><br><span class="line">如果提交，请不要用专职按钮</span><br></pre></td></tr></table></figure>

<p>select下拉列表默认选中项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;option &gt;&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>option元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;option &gt;&lt;&#x2F;option&gt;</span><br></pre></td></tr></table></figure>

<p>造一个下拉选项列表中的具体选项，option中的value值表示用户选择这个选项后，表单向服务器发送的数据</p>
<p>optgroup元素 下拉选项组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;optgroup &gt;&lt;&#x2F;optgroup&gt;</span><br></pre></td></tr></table></figure>

<p>文本域textarea</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;&quot; cols&#x3D;&quot;&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">一般通过样式更改宽高，会直接覆盖cols&#x3D;&quot;&quot; rows&#x3D;&quot;10&quot;</span><br></pre></td></tr></table></figure>

<p>可以通过resize：none防止用户拖拽</p>
<p>表单分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fieldset块级标签</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;&lt;&#x2F;fieldset&gt;标签可以将表单内的相关元素分组，会在相关表单元素周围绘制边框。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;legend&gt;&lt;&#x2F;legend&gt;定义标签默认写在边框线上，可以更改颜色或样式</span><br></pre></td></tr></table></figure>

<p>outline选中聚焦的框线</p>
<p>cursor鼠标的样式</p>
<p>pointer小手，代表可点击</p>
<p>cursor：help</p>
<h2 id="十一、表格布局与表格元素"><a href="#十一、表格布局与表格元素" class="headerlink" title="十一、表格布局与表格元素"></a>十一、表格布局与表格元素</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;&#x2F;*border&#x3D;&quot;1&quot; 边框线*&#x2F;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;row 1, cell 1&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;row 1, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;row 2, cell 1&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;row 2, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<p>表格的表头使用 <th> 标签进行定义。</p>
<h3 id="HTML-表格标签"><a href="#HTML-表格标签" class="headerlink" title="HTML 表格标签"></a>HTML 表格标签</h3><table>
<thead>
<tr>
<th align="left">标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><table></td>
<td>定义表格</td>
</tr>
<tr>
<td align="left"><th></td>
<td>定义表格的表头</td>
</tr>
<tr>
<td align="left"><tr></td>
<td>定义表格的行</td>
</tr>
<tr>
<td align="left"><td></td>
<td>定义表格单元</td>
</tr>
<tr>
<td align="left"><caption></td>
<td>定义表格标题</td>
</tr>
<tr>
<td align="left"><colgroup></td>
<td>定义表格列的组</td>
</tr>
<tr>
<td align="left"><col></td>
<td>定义用于表格列的属性</td>
</tr>
<tr>
<td align="left"><thead></td>
<td>定义表格的页眉</td>
</tr>
<tr>
<td align="left"><tbody></td>
<td>定义表格的主体</td>
</tr>
<tr>
<td align="left"><tfoot></td>
<td>定义表格的页脚</td>
</tr>
</tbody></table>
<p>1:  border-collapse：边框分隔（collapse，separate）<br>2：border-spacing：边框间距  默认值：separate </p>
<p>colspan属性表示该元素占几列，默认值为1<br>为保证表格的正常布局，每一行内的td或是th元素应该符合这样的公式<br>th1-1.colspan+th1-2.colspan…..=td1-1.colspan+td1-2.colspan…=td2-1.colspan+td2-2.colspan</p>
<h3 id="rowspan属性表示该元素占几行，默认值为1"><a href="#rowspan属性表示该元素占几行，默认值为1" class="headerlink" title="rowspan属性表示该元素占几行，默认值为1"></a>rowspan属性表示该元素占几行，默认值为1</h3><p>为保证表格的正常布局，每一行内的td或是th元素应该符合这样的公式</p>
<p>th1-1.rowspan +th1-2.rowspan …..+td1-1.rowspan +td1-2. rowspan …+td2-1. rowspan +td2-2. rowspan …=n(tr的数量)*m（td的数量最多的一行的数量）</p>
<p>行列的高度固定尺寸数据计算</p>
<p>1：宽度放不下，行元素自动撑高<br>2：行元素撑高，整个table一起撑高</p>
<p>table元素：width:500px ， height:500px</p>
<p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200414152629543.png"  alt="image-20200414152629543"></p>
<h2 id="十二、高级选择器和伪元素的应用"><a href="#十二、高级选择器和伪元素的应用" class="headerlink" title="十二、高级选择器和伪元素的应用"></a>十二、高级选择器和伪元素的应用</h2><h4 id="1-状态类选择器"><a href="#1-状态类选择器" class="headerlink" title="1.状态类选择器"></a>1.状态类选择器</h4><p>状态类有一个冒号：</p>
<p>爱恨准则：love  hate</p>
<p>1.未访问的的链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.已访问的链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a：visited&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.鼠标移动到链接上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a：hover&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.选定的链接（在你鼠标按下去但是还没有松手的时候）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a：active&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.改变被选中表单的样式checked</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input：chenked&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.改变表单聚焦时选中的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input:focus&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-结构类选择器"><a href="#2-结构类选择器" class="headerlink" title="2.结构类选择器"></a>2.结构类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:nth-child （），括号内可以使具体的数字，表示第几个，也可以是含n的公式，含n的一定要写在前面</span><br><span class="line">:nth-last-child （），倒序选择</span><br></pre></td></tr></table></figure>

<p>3.nth-of-(last)-type</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nth-of-type&#123;</span><br><span class="line"></span><br><span class="line">&#125;在当前标签进行排序</span><br></pre></td></tr></table></figure>

<p>4.first(last)-child</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.first-child&#123;</span><br><span class="line">&#125;第一个儿子</span><br><span class="line">.last-child&#123;</span><br><span class="line">&#125;最后一个儿子</span><br></pre></td></tr></table></figure>

<p>5.first(last)-of-type</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">first-of-type&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">first-last-type&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.属性内选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;可以选中所有ID名称里面的属性</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[class&#x3D;aa]&#123;</span><br><span class="line"></span><br><span class="line">&#125;可以选忠所有类型的属性</span><br><span class="line">&#x3D;必须是什么什么</span><br><span class="line">~&#x3D;包含什么什么</span><br><span class="line">^&#x3D;以什么什么开头</span><br><span class="line">&amp;&#x3D;以什么什么结尾</span><br><span class="line">*&#x3D;包含什么什么字符</span><br></pre></td></tr></table></figure>

<h2 id="2-伪元素"><a href="#2-伪元素" class="headerlink" title="2.伪元素"></a>2.伪元素</h2><p>伪元素前面有两个冒号：：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul::before&#123;</span><br><span class="line">	content:&quot;&quot;;</span><br><span class="line">	display:block;</span><br><span class="line">&#125;在ul最前面添加一个元素</span><br><span class="line">ul::after&#123;</span><br><span class="line">	content:&quot;&quot;;</span><br><span class="line">	display:inline;</span><br><span class="line">&#125;在ul最后面添加一个元素</span><br><span class="line">必须要有content进行激活 伪元素的内容写在content 里面   content:&quot;1231231&quot;;</span><br><span class="line">行内特性，必须要设置一下才能块级</span><br><span class="line">::selection&#123;</span><br><span class="line"></span><br><span class="line">&#125;被选中的内容的样式</span><br><span class="line">::first-letter&#123;</span><br><span class="line"></span><br><span class="line">&#125;段落中第一个字或者第一字符	</span><br><span class="line">::first-line&#123;</span><br><span class="line"></span><br><span class="line">&#125;段落中的第一行</span><br></pre></td></tr></table></figure>



<h2 id="十三、动画样式"><a href="#十三、动画样式" class="headerlink" title="十三、动画样式"></a>十三、动画样式</h2><p>触发行动画</p>
<p>常用触发动作<br>1：鼠标悬浮（：hover）<br>2：选项选中（：checked）<br>3：输入框点击（：active）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行时长</span><br><span class="line">transition-duration:5s;</span><br><span class="line">延迟执行</span><br><span class="line">transition-dalay:2s;</span><br><span class="line"></span><br><span class="line">transition-timing-function:ease-in-out;</span><br><span class="line">匀速：linear</span><br><span class="line">慢快慢：ease-in</span><br><span class="line">慢速开始：ease-out</span><br><span class="line">慢速开始和快速开始：ease-in-out</span><br></pre></td></tr></table></figure>

<p>贝塞尔曲线官网<a href="http://yisibl.github.io/cubic-bezier/" target="_blank" rel="noopener">cubic-bezier.com</a></p>
<p>贝塞尔曲线cubic-bezier</p>
<p>transition-timing-function:cubic-bezier(0,0,1,1)</p>
<p>过渡动画属性 （只能改变能过渡的参数值的）display：none和black是无法过渡的</p>
<p>transition-property：</p>
<p>复合写法transition：property  duration  timing-function  delay;</p>
<p>transition:all 3s ease-in-out;</p>
<p>在:hover里面会有瞬间出现瞬间消失的感觉</p>
<p>主动式动画</p>
<p>@keyframes  animationname 名字，任意取名</p>
<p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200414153019429.png"  alt="image-20200414153019429"></p>
<p>  animation：name   duration timing-function delay  iteration-count  direction</p>
<p>direction==&gt;normal 默认值   alternate 龙摆尾  reverse反向执行      alternate - reverse反向龙摆尾</p>
<p> iteration-count动画执行次数  infinite 无限循环</p>
<p>两个值可以写from到to</p>
<p>animation-paly-state：paused;  默认值running 一直播放   paused停止</p>
<p>animation-fill-mode：forwards；默认值forwards  保留最后一帧    backwards  保留第一帧</p>
<p>触发型动画，都要有时间，属性，达到一个可以过渡的</p>
<p>  根据CSS3规范，视口单位主要包括以下4个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.vw：1vw等于视口宽度的1%。</span><br><span class="line"></span><br><span class="line">2.vh：1vh等于视口高度的1%。</span><br><span class="line"></span><br><span class="line">3.vmin：选取vw和vh中最小的那个。</span><br><span class="line"></span><br><span class="line">4.vmax：选取vw和vh中最大的那个。</span><br><span class="line"></span><br><span class="line">			   vw: 长度为视窗宽比例</span><br><span class="line">             vh : 长度为视窗高比例</span><br><span class="line">             vmin : 视窗以宽高中小的为主</span><br><span class="line">             vmax : 视窗以宽高中大的为主</span><br><span class="line">             calc() : 长度计算函数</span><br></pre></td></tr></table></figure>



<h3 id="十四、transform-详解"><a href="#十四、transform-详解" class="headerlink" title="十四、transform 详解"></a>十四、transform 详解</h3><p>transform </p>
<p>旋转（rotate），缩放（scale），移动(translate)，倾斜(skew)</p>
<p>角度值（deg）</p>
<p>transform :rotate（20deg）</p>
<p>旋转（rotate）角度值（deg）元素中心点顺时针旋转</p>
<p>translate（x，y）x横坐标的值，y纵坐标的值</p>
<p>x: 定义元素水平方向的倾斜角度</p>
<p>y:  定义元素垂直方向的倾斜角度</p>
<p>translate单独写法</p>
<p> translateX</p>
<p> translateY</p>
<p>缩放（scale）</p>
<p>transform :scale( x,y)</p>
<p>scale(-1)为负值的时候是颠倒的状态</p>
<p>倾斜(skew)</p>
<p>transform:skew ( x,y)</p>
<p>origin变化远点 默认值50% 50%，也就是中心点</p>
<p>transform-origin</p>
<p>复合写法</p>
<p>transform:rotate(45deg) translateX(300px) translateY(200px) ;</p>
<p>transform:translateX(200px) translateY(300px) rotate(45deg);</p>
<p>顺序不同，写的位置也不同</p>
<h2 id="伪元素复习："><a href="#伪元素复习：" class="headerlink" title="伪元素复习："></a>伪元素复习：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div::before&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>before在标签的里面</p>
<p>伪元素默认是行内，设置宽高需要display：block设置成为块级</p>
<h4 id="十五、3D动画以及滤镜样式"><a href="#十五、3D动画以及滤镜样式" class="headerlink" title="十五、3D动画以及滤镜样式"></a>十五、3D动画以及滤镜样式</h4><p>transfrom-style:preserve-3d开辟异次元空间  需要设置在父级</p>
<p>perspective视距，透视 透视会造成盒子变形</p>
<p>z轴的位置可以用<strong>perspective-origin</strong>样式来设置</p>
<p><strong>默认位置</strong>为perspective-origin:50% 50%;/<em>与变化原点类似</em>/</p>
<h3 id="盒影阴"><a href="#盒影阴" class="headerlink" title="盒影阴"></a>盒影阴</h3><p>必须要有的属性</p>
<p>h-shadow水平阴影</p>
<p>v-shadow垂直阴影</p>
<p>可以选择的</p>
<p>blur模糊距离</p>
<p>spread 阴影尺寸</p>
<p>color 盒颜色</p>
<p>inset：内阴影</p>
<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>必须要有的</p>
<p>h-shadow水平阴影</p>
<p>v-shadow垂直阴影</p>
<p>可以选择的</p>
<p>blur：模糊距离；</p>
<p>text-shadow：；</p>
<p>滤镜样式</p>
<p>滤镜</p>
<p>filter:</p>
<p>filter:none ;无样式</p>
<p>filter:blur(px);高斯模糊，值越大越模糊，不接受百分比</p>
<p>filter:brightness();brightness(%)亮度，100%，0%全黑，超过100%越来越亮；</p>
<p>filter:contrast();contrast(%)对比度，100%，0%全灰，超过100%对比越高</p>
<p>filter:drop-shadow():</p>
<p>值drop-shadow:h-shadow v-shadow  bulr spread color</p>
<p>注意webkit不支持第四个长度spread，加上也不会渲染</p>
<p>filter:grayscale();grayscale(%);灰度   100%全灰，0%不变</p>
<p>filter:hue-rotate();hue-rotate(deg)色相旋转 0deg没有变化 360deg绕了一圈</p>
<p>filter:invert();invert(%)反转输入图像 0%没有变化，100%完反转</p>
<p>filter:opacity;opacity(%)透明度0%完全透明， 100%完全不透明</p>
<p>filter:saturate();saturate()饱和度(%):0%完全不饱和，100%没变化，默认值1</p>
<p>filter:sepia()；sepia(%)深褐色：100%完全褐色，0%不变</p>
<p>filter:url()；filter:url(svg-url#element-id)从外部引用滤镜的图片，通过XML文件，文件里面设置了SVG滤镜</p>
<p>inherit:从父级继承</p>
<p>复合写法，顺序会影响结果</p>
<p>box-reflect倒影</p>
<p>-webkit-box-reflect:below&nbsp;3px&nbsp;-webkit-linear-gradient(top,rgba(0,0,0,0)&nbsp;40%,rgba(0,0,0,0.5));</p>
<h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p><strong>box-reflect</strong>：none | <direction> <offset> <mask-box-image></p>
<p>**** = above | below | left | right</p>
<p>**** = <length> | <percentage></p>
<p>**** = none | <url> | <linear-gradient> | <radial-gradient> | <repeating-linear-gradient> | <repeating-radial-gradient></p>
<p><strong>默认值</strong>：none</p>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><ul>
<li><p>none：</p>
<p>无倒影</p>
</li>
</ul>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><direction></h3><ul>
<li><p>above：</p>
<p>指定倒影在对象的上边</p>
</li>
<li><p>below：</p>
<p>指定倒影在对象的下边</p>
</li>
<li><p>left：</p>
<p>指定倒影在对象的左边</p>
</li>
<li><p>right：</p>
<p>指定倒影在对象的右边</p>
</li>
</ul>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a><offset></h3><ul>
<li><p><length>：</p>
<p>用长度值来定义倒影与对象之间的间隔。可以为负值</p>
</li>
<li><p><percentage>：</p>
<p>用百分比来定义倒影与对象之间的间隔。可以为负值</p>
</li>
</ul>
<h3 id="-3"><a href="#-3" class="headerlink" title=""></a><mask-box-image></h3><ul>
<li><p>none：</p>
<p>无遮罩图像</p>
</li>
<li><p><url>：</p>
<p>使用绝对或相对地址指定遮罩图像。</p>
</li>
<li><p><linear-gradient>：</p>
<p>使用线性渐变创建遮罩图像。</p>
</li>
<li><p><radial-gradient>：</p>
<p>使用径向(放射性)渐变创建遮罩图像。</p>
</li>
<li><p><repeating-linear-gradient>：</p>
<p>使用重复的线性渐变创建背遮罩像。</p>
</li>
<li><p><repeating-radial-gradient>：</p>
<p>使用重复的径向(放射性)渐变创建遮罩图像。</p>
</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>设置或检索对象倒影。</strong></p>
<ul>
<li>对应的脚本特性为<strong>boxReflect</strong>。</li>
</ul>
<p>embed插件音视频自动播放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;embed src&#x3D;&quot;Jimmy Fontana - Il mondo.mp3&quot; hidden&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>



<h2 id="十六、弹性盒模型"><a href="#十六、弹性盒模型" class="headerlink" title="十六、弹性盒模型"></a>十六、弹性盒模型</h2><p>页面常见布局实现方案</p>
<p>  水平居中</p>
<p>1.margin-left、margin-right的值设置为auto</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">	width:500px;</span><br><span class="line">	height:400px;</span><br><span class="line">	backgroud-color:orange;</span><br><span class="line">	display:flex;</span><br><span class="line">	margin:100px auto 0;</span><br><span class="line">&#125;</span><br><span class="line">.container&gt;div&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">	&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<p>弹性盒模里面有两条轴</p>
<p>主轴，main axis 从左到右的方式进行排布</p>
<p>交叉轴，cross axis 从上到下的方式进行排布</p>
<p>2.父元素和子元素设置相同的宽度，父元素设置同等值的padding</p>
<p>3.特点：设置简单，自动计算</p>
<p><strong>我们给父元素设置display：flex；使父元素变成弹性盒模型</strong></p>
<p>父元素：宽度：400px;高度：400px；</p>
<p>子元素：宽度：100px；高度：100px；</p>
<p>弹性盒子：子元素沿着父元素的主轴排列</p>
<p>从左到右的方式进行排布，设置宽度超过父元素的宽度平均分布宽度，盒子宽度不同不够就按比例分配</p>
<p>不设置宽，宽由内容撑开</p>
<p>父元素：设置flex-direction:决定主轴的方向（子元素/项目的排列方向）；</p>
<p>flex-direction:row</p>
<p>row默认值从左到右</p>
<p>row-reverse从右到左    </p>
<p>column 从上到下</p>
<p>column -reverse从下到上</p>
<p>flex-warp:warp子元素可以换行</p>
<p>justify-content默认情况下，项目都从主轴线的mian start点开始排列在主轴线上。</p>
<p>flex-end：右对齐</p>
<p>lex-start：左对齐</p>
<p>center 居中</p>
<p>space-between：两端对齐，项目之间的间隔都相等。</p>
<p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>
<p>弹性盒子内的元素交叉轴方向如何进行排布align-items</p>
<p>align-items：flex-start</p>
<p>flex-start：交叉轴的起点对齐。</p>
<p>flex-end：交叉轴的终点对齐。</p>
<p>center：交叉轴的中点对齐。</p>
<p><strong>baseline:</strong> <strong>项目的第一行文字的基线对齐。</strong></p>
<p>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</p>
<p>align-content：flex-start贴在主轴的起始点</p>
<p>align-content：flex-end贴在主轴的终点</p>
<p>align-content：space-between等距离划分</p>
<p>align-content：space-around：横向每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</p>
<p><strong>flex-grow</strong> （弹性增长因子）定义项目的放大比例（默认为0） 即如果存在剩余空间，也不放大</p>
<p>该CSS属性设置子元素在弹性容器的具有剩余空间是应该如何分配给元素。flex-grow剩余空间是flex容器的大小减去所有flex项目的大小。如果所有兄弟项目具有相同的弹性增长因子，则所有项目将获得相同的剩余空间份额，否则将根据不同弹性增长因子定义的比率进行分配。</p>
<p><strong>flex-shrink</strong> （弹性缩放因子）：</p>
<p> 定义项目的缩小比例，即如果空间不足，该项目将缩小（默认为1）； </p>
<p>根据弹性盒模型的缩放原理,子元素的实际宽度：100px</p>
<p>根据弹性盒模型的缩放原理,子元素的实际宽度：100px</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公式：元素1的实际&#x3D;元素1的宽度（150𝑝𝑥）−(子元素宽之和−父元素宽度)∗元素1弹性缩放因子&#x2F;缩放因子之和</span><br><span class="line">&#x3D;150−(600−500)∗2&#x2F;10&#x3D;150−20&#x3D;130</span><br></pre></td></tr></table></figure>

<p>flex-basis：该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 </p>
<p><strong>auto:</strong> <strong>计算值为</strong> <strong>1 1 auto</strong></p>
<p><strong>initial:</strong> <strong>计算值为</strong> <strong>0 1 auto</strong></p>
<p>none：计算值为0 0 auto</p>
<p>inherit：从父元素继承</p>
<p> 当一个元素同时被设置了 <code>flex-basis</code> (除值为 <code>auto</code> 外) 和 <code>width</code> (或者在 <code>flex-direction: column</code> 情况下设置了<code>height</code>) , <code>flex-basis</code> 具有更高的优先级.</p>
<p>flex属性是flex-grow, flex-shrink <strong>和</strong> <strong>flex-basis的简写，默认值为0 1</strong>   auto。后两个属性可选</p>
<p>flex: flex-grow  flex-shrink flex-basis;</p>
<p>弹性盒子内的子元素的排布顺序order</p>
<p>order：整数值；</p>
<p>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>
<p><strong>弹性盒子内的单个子元素在纵轴的顺序</strong></p>
<p>align-self：</p>
<p>auto：如果align-self的值为auto，则其计算值为元素的父元素的align-items值，如果其没有父元素，则计算值为stretch。</p>
<p>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</p>
<p>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</p>
<p><strong>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</strong></p>
<p>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与flex-start等效。其它情况下，该值将参与基线对齐</p>
<p>stretch：如果指定侧轴大小的属性值为auto，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照min/max-width/height属性的限制。</p>
<h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>iframe标签详解</p>
<p><img src="/" class="lazyload" data-src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200414153321203.png"  alt="image-20200414153321203"></p>
<p>外联引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;baidu.com</span><br><span class="line">        &quot; frameborder&#x3D;&quot;1&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>本地引入</p>
<iframe src="./xxxx.html
        " frameborder="1"></iframe>


<p>frameborder=”1”  1有0无边框</p>
<p><a href="https://www.w3school.com.cn/tags/tag_iframe.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/tags/tag_iframe.asp</a></p>
<p><strong>结构性标签</strong> </p>
<p>•<header></header>页眉,也可用与块头部</p>
<p>•<nav></nav>导航</p>
<p>•<section></section>页面上的板块</p>
<p>•<article></article>用来在页面中表示一套结构完整且独立的内容部分</p>
<p>•<aside></aside>侧边栏,广告,nav元素组,以及其它类似的内容部分aside的内容应该与artical的内容相关</p>
<p>•<footer></footer>页面的底部或者板块的底部</p>
<p>权重等级 div&lt;section&lt; article&lt; header= nav= aside= footer</p>
<h3 id="article"><a href="#article" class="headerlink" title="article"></a>article</h3><p><strong>– 解释</strong><br>article标签装载显示一个独立的文章内容。例如一篇完整的论坛帖子，一则网站新闻，一篇博客文章等等，一个用户评论等等 artilce可以嵌套，则内层的artilce对外层的article标签有隶属的关系。例如，一个博客文章，可以用article显示，然后一 些评论可以以article的形式嵌入其中。</p>
<p><strong>– 示列</strong></p>
<article>
<h1>文章标题</h1>
这是一篇文章
  <article>评论1...</article>
  <article>评论2...</article>
</article>


<h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><p><strong>– 解释</strong><br>section 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p>
<p>– 示列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;&lt;section&gt;   &lt;h1&gt;章节一&lt;&#x2F;h1&gt;    &lt;p&gt;详细内容...&lt;&#x2F;p&gt;&lt;&#x2F;section&gt;&lt;section&gt;   &lt;h1&gt;章节二&lt;&#x2F;h1&gt;    &lt;p&gt;详细内容...&lt;&#x2F;p&gt;&lt;&#x2F;section&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>



<h3 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h3><p><strong>– 解释</strong><br>aside 用来装载非正文类的内容。例如广告，成组的链接，侧边栏等等。</p>
<p>– 示列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;&lt;aside&gt;热门文章&lt;&#x2F;aside&gt;&lt;aside&gt;广告&lt;&#x2F;aside&gt;&lt;article&gt;&lt;h1&gt;文章标题&lt;&#x2F;h1&gt;这是一篇文章   &lt;article&gt;评论1...&lt;&#x2F;article&gt;    &lt;article&gt;评论2...&lt;&#x2F;article&gt;&lt;&#x2F;article&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>



<h3 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a>hgroup</h3><p><strong>– 解释</strong><br>hgroup 标签用于对网页或区段的标题元素（h1-h6）进行组合。例如，在一个区段中你有连续的h系列的标签元素，则可以用hgroup将他们括起来。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hgroup&gt;</span><br><span class="line">&lt;h1&gt;The reality dysfunction&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;Space is not the only void&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;hgroup&gt; &lt;hgroup&gt;</span><br><span class="line">&lt;h1&gt;Dr. Strangelove&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;Or: How I Learned to Stop Worrying and Love the Bomb&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;hgroup&gt;</span><br></pre></td></tr></table></figure>



<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><strong>– 解释</strong><br>header 标签定义文档的页面组合，通常是一些引导和导航信息。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;header&gt;</span><br><span class="line">&lt;p&gt;this is the page Logo&lt;&#x2F;p&gt;</span><br><span class="line">&lt;nav&gt;this is page navigation&lt;&#x2F;nav&gt;</span><br><span class="line">&lt;&#x2F;header&gt;</span><br></pre></td></tr></table></figure>



<h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><p><strong>– 解释</strong><br>footer 标签定义 section 或 document 的页脚。在典型情况下，该元素会包含创作者的姓名、文档的创作日期以及/或者联系信息。</p>
<p><strong>– 示列</strong></p>
<footer> © 2012 Baidu 使用百度前必读 京ICP证030173号 </footer>

<h3 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h3><p><strong>– 解释</strong><br>nav 标签定义显示导航链接不是所有的成组的超级链接都需要放在nav标签里。nav标签里应该放入一些当前页面的主要导航链接。 例如在页脚显示一个站点的导航链接（如首页，服务信息页面，版权信息页面等等），就可以使用nav标签，当然，这不是必须的。</p>
<p>– 示列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;&quot;articles.html&quot;&gt;Index of all articles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;li&gt;&lt;a href&#x3D;&quot;today.html&quot;&gt;Things sheeple need to wake up for today&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;li&gt;&lt;a href&#x3D;&quot;successes.html&quot;&gt;Sheeple we have managed to wake&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>



<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p><strong>– 解释</strong><br>time 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。该元素能够以机器可读的方式对日期和时间进行编码，这样， 举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，搜索引擎也能够生成更智能的搜索结果。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;我们在每天早上 &#96;9:00&#96; 开始营业。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;我在 &#96;情人节&#96; 有个约会。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>



<h3 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h3><p><strong>– 解释</strong><br>mark 标签定义带有记号的文本。请在需要突出显示文本时使用 <mark> 标签。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Do not forget to buy &#96;milk&#96; today.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>



<h3 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h3><p><strong>– 解释</strong><br>figure标签规定独立的流内容（图像、图表、照片、代码等等）。figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;黄浦江上的的卢浦大桥&lt;&#x2F;p&gt; &lt;img src&#x3D;&quot;shanghai_lupu_bridge.jpg&quot; width&#x3D;&quot;350&quot; height&#x3D;&quot;234&quot; &#x2F;&gt; &lt;&#x2F;figure&gt;</span><br></pre></td></tr></table></figure>



<h3 id="figcaption"><a href="#figcaption" class="headerlink" title="figcaption"></a>figcaption</h3><p><strong>– 解释</strong><br>figcaption 标签定义 figure 元素的标题（caption）。”figcaption” 元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置。</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;figure&gt; &lt;figcaption&gt;黄浦江上的的卢浦大桥&lt;&#x2F;figcaption&gt; &lt;img src&#x3D;&quot;shanghai_lupu_bridge.jpg&quot; width&#x3D;&quot;350&quot; height&#x3D;&quot;234&quot; &#x2F;&gt; &lt;&#x2F;figure&gt;</span><br></pre></td></tr></table></figure>



<h3 id="contextmenu-menu"><a href="#contextmenu-menu" class="headerlink" title="contextmenu+menu"></a>contextmenu+menu</h3><p><strong>– 解释</strong><br>contextmenu 添加到系统右键菜单 [貌似这个功能只有firefox支持，很悲催的]</p>
<p><strong>– 示列</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;添加到系统右键菜单&lt; contextmenu&#x3D;mymenu &#x2F;div&gt; &lt;menu type&#x3D;&quot;context&quot; id&#x3D;&quot;mymenu&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>右击我试试</p>
<p>十七 响应式布局</p>
<p>响应式：一个网站可以兼容多个终端</p>
<p>优点：</p>
<p>1.面对不同分辨率时，设备的灵活性强</p>
<p>2.能够快捷解决在多个设备上适应的问题</p>
<p>3.中小型网站</p>
<p>缺点：</p>
<p>1.为了兼容多个设备，工作量较大，效率不高</p>
<p>2.代码冗余，有很多无意义的元素，加载速率不会很快</p>
<p>原理 通过css3新增的媒体查询，通过匹配不同宽度达到不同的显示样式</p>
<p>媒体查询，能够检测不同的设备，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;user-scalable&#x3D;&quot;no&quot; minimum-scale&#x3D;1.0，&gt;</span><br><span class="line">user-scalable 是否允许缩放</span><br><span class="line">minimum-scale：最小缩放比例，</span><br><span class="line">maxmum-scale：最大缩放比例，</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&#x2F;*媒体查询语法*&#x2F;</span><br><span class="line">&#x2F;*and后面必须要有一个空格，没敲整个媒体查询都是失效的*&#x2F;</span><br><span class="line">@medie all&#x2F;screen and&#x2F;not&#x2F;only()</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">@import引入</span><br><span class="line">@import url(css文件地址)  mediatype   [and&#x2F;not&#x2F;only] (media feature) [and&#x2F;not&#x2F;only] (media feature)；</span><br><span class="line">外联引入</span><br><span class="line">@media url(css文件地址)   哪种设备      判断条件1         参数条件1          判断条件2         参数条件2；</span><br></pre></td></tr></table></figure>

<p>rem是指根元素的字体大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.content&#123;</span><br><span class="line">	font-size:20px;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">	font-size:1rem;</span><br><span class="line">	&#x2F;*1rem&#x3D;16px为基点*&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;comtent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
</search>
